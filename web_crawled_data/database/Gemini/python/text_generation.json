# Text generation 

{
    "base_url": "https://ai.google.dev/gemini-api/docs/text-generation?lang=python",
    "crawl_date": "2024-12-29T12:24:52.425971",
    "chunk_number": 1,
    "pages": [
        {
            "url": "https://ai.google.dev/gemini-api/docs/text-generation?lang=python",
            "title": "Text generation  |  Gemini API  |  Google AI for Developers",
            "text_content": "Text generation  |  Gemini API  |  Google AI for Developers Models Solutions Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Code assistance Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Showcase Gemini Showcase Gemini API Developer Competition Community Google AI Forum Gemini for Research / English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어 Sign in Gemini API docs API Reference SDKs Pricing Cookbook Models Gemini API docs API Reference SDKs Pricing Cookbook Solutions More Code assistance More Showcase More Community More Overview Get started Quickstart API keys Libraries Release notes Developer forum Models Gemini Gemini 2.0 Overview SDKs Thinking Mode Experimental models Capabilities Text generation Vision Audio understanding Long context Code execution Structured output Function calling Intro to function calling Function calling tutorial Extract structured data Document understanding Grounding Grounding with Google Search Use Google Search Suggestions Fine-tuning Intro to fine-tuning Fine-tuning tutorial Embeddings Guides Context caching Image generation Prompt engineering Intro to prompting Prompting strategies File prompting strategies Token counting OpenAI compatibility Billing info Safety Safety settings Safety guidance Additional resources Android (on-device) Firebase extensions Generative models Google AI Studio quickstart LearnLM Migrate to Cloud OAuth authentication Semantic retrieval System instructions Gemini for Research Gemini Academic Program Use cases Applications Code assistant Flutter code generator Content search Data exploration agent Writing assistant Slides reviewer Troubleshooting API troubleshooting AI Studio troubleshooting Google Workspace Request more quota Legal Terms of service Available regions Abuse monitoring Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Gemini Showcase Gemini API Developer Competition Google AI Forum Gemini for Research Gemini 2.0 Flash Experimental is now available! Learn more Home Gemini API Models Send feedback Text generation Python Node.js Go REST The Gemini API can generate text output when provided text, images, video, and\naudio as input. This guide shows you how to generate text using the generateContent and streamGenerateContent methods. To learn about working with Gemini's vision and audio capabilities,\nrefer to the Vision and Audio guides. Generate text from text-only input The simplest way to generate text using the Gemini API is to provide the model\nwith a single text-only input, as shown in this example: import google.generativeai as genai genai . configure ( api_key = \"GEMINI_API_KEY\" ) model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) response = model . generate_content ( \"How does AI work?\" ) print ( response . text ) In this case, the prompt (\"Explain how AI works\") doesn't\ninclude any output examples, system instructions, or formatting information.\nIt's a zero-shot approach. For some use cases, a one-shot or few-shot prompt\nmight produce output that's more aligned with user expectations. In some cases,\nyou might also want to provide system instructions to help the model\nunderstand the task or follow specific guidelines. Generate text from text-and-image input The Gemini API supports multimodal inputs that combine text and media files.\nThe following example shows how to generate text from text-and-image input: import google.generativeai as genai import PIL.Image genai . configure ( api_key = \"GEMINI_API_KEY\" ) model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) organ = PIL . Image . open ( \"/path/to/organ.png\" ) response = model . generate_content ([ \"Tell me about this instrument\" , organ ]) print ( response . text ) Generate a text stream By default, the model returns a response after completing the entire text\ngeneration process. You can achieve faster interactions by not waiting for the\nentire result, and instead use streaming to handle partial results. The following example shows how to implement streaming using the streamGenerateContent method to\ngenerate text from a text-only input prompt. import google.generativeai as genai genai . configure ( api_key = \"GEMINI_API_KEY\" ) model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) response = model . generate_content ( \"Explain how AI works\" , stream = True ) for chunk in response : print ( chunk . text , end = \"\" ) Create a chat conversation The Gemini SDK lets you collect multiple rounds of questions\nand responses, allowing users to step incrementally toward answers or get help\nwith multipart problems. This SDK feature provides an interface to keep\ntrack of conversations history, but behind the scenes uses the same generateContent method to create the response. The following code example shows a basic chat implementation: import google.generativeai as genai genai . configure ( api_key = \"GEMINI_API_KEY\" ) model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) chat = model . start_chat ( history = [ { \"role\" : \"user\" , \"parts\" : \"Hello\" }, { \"role\" : \"model\" , \"parts\" : \"Great to meet you. What would you like to know?\" }, ] ) response = chat . send_message ( \"I have 2 dogs in my house.\" ) print ( response . text ) response2 = chat . send_message ( \"How many paws are in my house?\" ) print ( response2 . text ) You can also use streaming with chat, as shown in the following example: import google.generativeai as genai genai . configure ( api_key = \"GEMINI_API_KEY\" ) model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) chat = model . start_chat ( history = [ { \"role\" : \"user\" , \"parts\" : \"Hello\" }, { \"role\" : \"model\" , \"parts\" : \"Great to meet you. What would you like to know?\" }, ] ) response = chat . send_message ( \"I have 2 dogs in my house.\" , stream = True ) for chunk in response : print ( chunk . text , end = \"\" ) response2 = chat . send_message ( \"How many paws are in my house?\" , stream = True ) for chunk in response2 : print ( chunk . text , end = \"\" ) print ( chat . history ) Configure text generation Every prompt you send to the model includes\nparameters that control how the model generates responses. You can use GenerationConfig to\nconfigure these parameters. If you don't configure the parameters, the model\nuses default options, which can vary by model. The following example shows how to configure several of the available options. import google.generativeai as genai genai . configure ( api_key = \"GEMINI_API_KEY\" ) model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) response = model . generate_content ( \"Explain how AI works\" , generation_config = genai . GenerationConfig ( max_output_tokens = 1000 , temperature = 0.1 , ) ) print ( response . text ) What's next Now that you have explored the basics of the Gemini API, you might want to\ntry: Vision understanding : Learn how to use\nGemini's native vision understanding to process images and videos. Audio understanding : Learn how to use\nGemini's native audio understanding to process audio files. Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License . For details, see the Google Developers Site Policies . Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-28 UTC. Terms Privacy Manage cookies English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어",
            "meta_description": "Get started building chat and text generation apps with the Gemini API",
            "links": [
                "https://ai.google.dev/gemini-api/docs/text-generation?lang=python",
                "https://ai.google.dev/gemini-api/docs/text-generation?lang=python",
                "https://ai.google.dev/gemini-api/docs/text-generation?lang=python",
                "https://ai.google.dev/gemini-api/docs/text-generation?lang=python",
                "https://ai.google.dev/gemini-api/docs/text-generation",
                "https://ai.google.dev/gemini-api/docs/text-generation?lang=python"
            ],
            "timestamp": "2024-12-29T12:24:51.722405",
            "status_code": 200
        },
        {
            "url": "https://ai.google.dev/gemini-api/docs/text-generation",
            "title": "Text generation  |  Gemini API  |  Google AI for Developers",
            "text_content": "Text generation  |  Gemini API  |  Google AI for Developers Models Solutions Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Code assistance Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Showcase Gemini Showcase Gemini API Developer Competition Community Google AI Forum Gemini for Research / English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어 Sign in Gemini API docs API Reference SDKs Pricing Cookbook Models Gemini API docs API Reference SDKs Pricing Cookbook Solutions More Code assistance More Showcase More Community More Overview Get started Quickstart API keys Libraries Release notes Developer forum Models Gemini Gemini 2.0 Overview SDKs Thinking Mode Experimental models Capabilities Text generation Vision Audio understanding Long context Code execution Structured output Function calling Intro to function calling Function calling tutorial Extract structured data Document understanding Grounding Grounding with Google Search Use Google Search Suggestions Fine-tuning Intro to fine-tuning Fine-tuning tutorial Embeddings Guides Context caching Image generation Prompt engineering Intro to prompting Prompting strategies File prompting strategies Token counting OpenAI compatibility Billing info Safety Safety settings Safety guidance Additional resources Android (on-device) Firebase extensions Generative models Google AI Studio quickstart LearnLM Migrate to Cloud OAuth authentication Semantic retrieval System instructions Gemini for Research Gemini Academic Program Use cases Applications Code assistant Flutter code generator Content search Data exploration agent Writing assistant Slides reviewer Troubleshooting API troubleshooting AI Studio troubleshooting Google Workspace Request more quota Legal Terms of service Available regions Abuse monitoring Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Gemini Showcase Gemini API Developer Competition Google AI Forum Gemini for Research Gemini 2.0 Flash Experimental is now available! Learn more Home Gemini API Models Send feedback Text generation Python Node.js Go REST The Gemini API can generate text output when provided text, images, video, and\naudio as input. This guide shows you how to generate text using the generateContent and streamGenerateContent methods. To learn about working with Gemini's vision and audio capabilities,\nrefer to the Vision and Audio guides. What's next Now that you have explored the basics of the Gemini API, you might want to\ntry: Vision understanding : Learn how to use\nGemini's native vision understanding to process images and videos. Audio understanding : Learn how to use\nGemini's native audio understanding to process audio files. Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License . For details, see the Google Developers Site Policies . Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-28 UTC. Terms Privacy Manage cookies English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어",
            "meta_description": "Get started building chat and text generation apps with the Gemini API",
            "links": [
                "https://ai.google.dev/gemini-api/docs/text-generation",
                "https://ai.google.dev/gemini-api/docs/text-generation",
                "https://ai.google.dev/gemini-api/docs/text-generation",
                "https://ai.google.dev/gemini-api/docs/text-generation",
                "https://ai.google.dev/gemini-api/docs/text-generation",
                "https://ai.google.dev/gemini-api/docs/text-generation"
            ],
            "timestamp": "2024-12-29T12:24:52.399722",
            "status_code": 200
        }
    ]
}