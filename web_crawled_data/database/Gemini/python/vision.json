# Vision

{
    "base_url": "https://ai.google.dev/gemini-api/docs/vision?lang=python",
    "crawl_date": "2024-12-29T12:27:31.646477",
    "chunk_number": 1,
    "pages": [
        {
            "url": "https://ai.google.dev/gemini-api/docs/vision?lang=python",
            "title": "Explore vision capabilities with the Gemini API  |  Google AI for Developers",
            "text_content": "Explore vision capabilities with the Gemini API  |  Google AI for Developers Models Solutions Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Code assistance Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Showcase Gemini Showcase Gemini API Developer Competition Community Google AI Forum Gemini for Research / English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어 Sign in Gemini API docs API Reference SDKs Pricing Cookbook Models Gemini API docs API Reference SDKs Pricing Cookbook Solutions More Code assistance More Showcase More Community More Overview Get started Quickstart API keys Libraries Release notes Developer forum Models Gemini Gemini 2.0 Overview SDKs Thinking Mode Experimental models Capabilities Text generation Vision Audio understanding Long context Code execution Structured output Function calling Intro to function calling Function calling tutorial Extract structured data Document understanding Grounding Grounding with Google Search Use Google Search Suggestions Fine-tuning Intro to fine-tuning Fine-tuning tutorial Embeddings Guides Context caching Image generation Prompt engineering Intro to prompting Prompting strategies File prompting strategies Token counting OpenAI compatibility Billing info Safety Safety settings Safety guidance Additional resources Android (on-device) Firebase extensions Generative models Google AI Studio quickstart LearnLM Migrate to Cloud OAuth authentication Semantic retrieval System instructions Gemini for Research Gemini Academic Program Use cases Applications Code assistant Flutter code generator Content search Data exploration agent Writing assistant Slides reviewer Troubleshooting API troubleshooting AI Studio troubleshooting Google Workspace Request more quota Legal Terms of service Available regions Abuse monitoring Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Gemini Showcase Gemini API Developer Competition Google AI Forum Gemini for Research Gemini 2.0 Flash Experimental is now available! Learn more Home Gemini API Models Send feedback Explore vision capabilities with the Gemini API Python Node.js Go REST View on ai.google.dev Try a Colab notebook View notebook on GitHub The Gemini API is able to process images and videos, enabling a multitude of\n exciting developer use cases. Some of Gemini's vision capabilities include\n the ability to: Caption and answer questions about images Transcribe and reason over PDFs, including long documents up to 2 million token context window Describe, segment, and extract information from videos,\nincluding both visual frames and audio, up to 90 minutes long Detect objects in an image and return bounding box coordinates for them This tutorial demonstrates some possible ways to prompt the Gemini API with\nimages and video input, provides code examples,\nand outlines prompting best practices with multimodal vision capabilities.\nAll output is text-only. Before you begin: Set up your project and API key Before calling the Gemini API, you need to set up your project and configure\nyour API key. Expand to view how to set up your project and API key Tip: For complete setup instructions, see the Gemini API quickstart . Get and secure your API key You need an API key to call the Gemini API. If you don't already have one,\ncreate a key in Google AI Studio. Get an API key It's strongly recommended that you do not check an API key into your version\ncontrol system. You should store your API key in a secrets store such as Google Cloud Secret Manager . This tutorial assumes that you're accessing your API key as an environment\nvariable. Install the SDK package and configure your API key Note: This section shows setup steps for a local Python environment. To install\n      dependencies and configure your API key for Colab, see the Authentication quickstart notebook The Python SDK for the Gemini API is contained in the google-generativeai package. Install the dependency using pip: pip install -U google-generativeai Import the package and configure the service with your API key: import os import google.generativeai as genai genai . configure ( api_key = os . environ [ 'API_KEY' ]) Prompting with images In this tutorial, you will upload images using the File API or as inline data\nand generate content based on those images. Technical details (images) Gemini 1.5 Pro and 1.5 Flash support a maximum of 3,600 image files. Images must be in one of the following image data MIME types: PNG - image/png JPEG - image/jpeg WEBP - image/webp HEIC - image/heic HEIF - image/heif Each image is equivalent to 258 tokens. While there are no specific limits to the number of pixels in an image besides\nthe model's context window, larger images are scaled down to a maximum\nresolution of 3072x3072 while preserving their original aspect ratio, while\nsmaller images are scaled up to 768x768 pixels. There is no cost reduction\nfor images at lower sizes, other than bandwidth, or performance improvement\nfor images at higher resolution. For best results: Rotate images to the correct orientation before uploading. Avoid blurry images. If using a single image, place the text prompt after the image. Image input For total image payload size less than 20MB, we recommend either uploading\nbase64 encoded images or directly uploading locally stored image files. Base64 encoded images You can upload public image URLs by encoding them as Base64 payloads.\nWe recommend using the httpx library to fetch the image URLs.\nThe following code example shows how to do this: import httpx import os import base64 model = genai . GenerativeModel ( model_name = \"gemini-1.5-pro\" ) image_path = \"https://upload.wikimedia.org/wikipedia/commons/thumb/8/87/Palace_of_Westminster_from_the_dome_on_Methodist_Central_Hall.jpg/2560px-Palace_of_Westminster_from_the_dome_on_Methodist_Central_Hall.jpg\" image = httpx . get ( image_path ) prompt = \"Caption this image.\" response = model . generate_content ([{ 'mime_type' : 'image/jpeg' , 'data' : base64 . b64encode ( image . content ) . decode ( 'utf-8' )}, prompt ]) print ( response . text ) Multiple images To prompt with multiple images in Base64 encoded format, you can do the\nfollowing: import httpx import os import base64 model = genai . GenerativeModel ( model_name = \"gemini-1.5-pro\" ) image_path_1 = \"path/to/your/image1.jpeg\" # Replace with the actual path to your first image image_path_2 = \"path/to/your/image2.jpeg\" # Replace with the actual path to your second image image_1 = httpx . get ( image_path_1 ) image_2 = httpx . get ( image_path_2 ) prompt = \"Generate a list of all the objects contained in both images.\" response = model . generate_content ([ { 'mime_type' : 'image/jpeg' , 'data' : base64 . b64encode ( image_1 . content ) . decode ( 'utf-8' )}, { 'mime_type' : 'image/jpeg' , 'data' : base64 . b64encode ( image_2 . content ) . decode ( 'utf-8' )}, prompt ]) print ( response . text ) Upload one or more locally stored image files Alternatively, you can upload one or more locally stored image files. import PIL.Image import os import google.generativeai as genai image_path_1 = \"path/to/your/image1.jpeg\" # Replace with the actual path to your first image image_path_2 = \"path/to/your/image2.jpeg\" # Replace with the actual path to your second image sample_file_1 = PIL . Image . open ( image_path_1 ) sample_file_2 = PIL . Image . open ( image_path_2 ) #Choose a Gemini model. model = genai . GenerativeModel ( model_name = \"gemini-1.5-pro\" ) prompt = \"Write an advertising jingle based on the items in both images.\" response = model . generate_content ([ prompt , sample_file_1 , sample_file_2 ]) print ( response . text ) Note that these inline data calls don't include many of the features available\nthrough the File API, such as getting file metadata, listing ,\nor deleting files . Large image payloads When the combination of files and system instructions that you intend to send is\nlarger than 20 MB in size, use the File API to upload those files. Use the media.upload method of the File API to upload an image of any size. Note: The File API lets you store up to 20 GB of files per project, with a\nper-file maximum size of 2 GB. Files are stored for 48 hours. They can be\naccessed in that period with your API key, but cannot be downloaded from the\nAPI. It is available at no cost in all regions where the Gemini API is\navailable. After uploading the file, you can make GenerateContent requests that reference\nthe File API URI. Select the generative model and provide it with a text prompt\nand the uploaded image. import google.generativeai as genai myfile = genai . upload_file ( media / \"Cajun_instruments.jpg\" ) print ( f \" { myfile =} \" ) model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) result = model . generate_content ( [ myfile , \" \\n\\n \" , \"Can you tell me about the instruments in this photo?\" ] ) print ( f \" { result . text =} \" ) files . py OpenAI Compatibility You can access Gemini's image understanding capabilities using the\nOpenAI libraries. This lets you integrate Gemini into existing\nOpenAI workflows by updating three lines of code and using\nyour Gemini API key. See the Image understanding example for code demonstrating how to send images encoded as Base64 payloads. Capabilities This section outlines specific vision capabilities of the Gemini model,\nincluding object detection and bounding box coordinates. Get a bounding box for an object Gemini models are trained to return bounding box coordinates as relative widths\nor heights in the range of [0, 1]. These values are then scaled by 1000 and\nconverted to integers. Effectively, the coordinates represent the bounding box\non a 1000x1000 pixel version of the image. Therefore, you'll need to\nconvert these coordinates back to the dimensions of your original\nimage to accurately map the bounding boxes. # Choose a Gemini model. model = genai . GenerativeModel ( model_name = \"gemini-1.5-pro\" ) prompt = \"Return a bounding box for each of the objects in this image in [ymin, xmin, ymax, xmax] format.\" response = model . generate_content ([ sample_file_1 , prompt ]) print ( response . text ) The model returns bounding box coordinates in the format [ymin, xmin, ymax, xmax] . To convert these normalized coordinates\nto the pixel coordinates of your original image, follow these steps: Divide each output coordinate by 1000. Multiply the x-coordinates by the original image width. Multiply the y-coordinates by the original image height. To explore more detailed examples of generating bounding box coordinates and\nvisualizing them on images, we encourage you to review our Object Detection cookbook example . Prompting with video In this tutorial, you will upload a video using the File API and generate\ncontent based on those images. Note: The File API is required to upload video files, due to their size.\nHowever, the File API is only available for Python, Node.js, Go, and REST. Technical details (video) Gemini 1.5 Pro and Flash support up to approximately an hour of video data. Video must be in one of the following video format MIME types: video/mp4 video/mpeg video/mov video/avi video/x-flv video/mpg video/webm video/wmv video/3gpp The File API service extracts image frames from videos at 1 frame per second\n(FPS) and audio at 1Kbps, single channel, adding timestamps every second.\nThese rates are subject to change in the future for improvements in inference. Note: The details of fast action sequences may be lost at the 1 FPS frame\nsampling rate. Consider slowing down high-speed clips for improved inference\nquality. Individual frames are 258 tokens, and audio is 32 tokens per second. With\nmetadata, each second of video becomes ~300 tokens, which means a 1M context\nwindow can fit slightly less than an hour of video. To ask questions about time-stamped locations, use the format MM:SS , where\nthe first two digits represent minutes and the last two digits represent\nseconds. For best results: Use one video per prompt. If using a single video, place the text prompt after the video. Upload a video file using the File API Note: The File API lets you store up to 20 GB of files per project, with a\nper-file maximum size of 2 GB. Files are stored for 48 hours. They can be\naccessed in that period with your API key, but they cannot be downloaded\nusing any API. It is available at no cost in all regions where the Gemini\nAPI is available. The File API accepts video file formats directly. This example uses the\nshort NASA film \"Jupiter's Great Red Spot Shrinks and Grows\" .\nCredit: Goddard Space Flight Center (GSFC)/David Ladd (2018). \"Jupiter's Great Red Spot Shrinks and Grows\" is in the public domain and does\nnot show identifiable people.\n( NASA image and media usage guidelines. ) Start by retrieving the short video: wget https://storage.googleapis.com/generativeai-downloads/images/GreatRedSpot.mp4 Upload the video using the File API and print the URI. # Upload the video and print a confirmation. video_file_name = \"GreatRedSpot.mp4\" print ( f \"Uploading file...\" ) video_file = genai . upload_file ( path = video_file_name ) print ( f \"Completed upload: { video_file . uri } \" ) Verify file upload and check state Verify the API has successfully received the files by calling the files.get method. Note: Video files have a State field in the File API. When a video is\nuploaded, it will be in the PROCESSING state until it is ready for inference. Only ACTIVE files can be used for model inference. import time # Check whether the file is ready to be used. while video_file . state . name == \"PROCESSING\" : print ( '.' , end = '' ) time . sleep ( 10 ) video_file = genai . get_file ( video_file . name ) if video_file . state . name == \"FAILED\" : raise ValueError ( video_file . state . name ) Prompt with a video and text Once the uploaded video is in the ACTIVE state, you can make GenerateContent requests that specify the File API URI for that video. Select the generative\nmodel and provide it with the uploaded video and a text prompt. # Create the prompt. prompt = \"Summarize this video. Then create a quiz with answer key based on the information in the video.\" # Choose a Gemini model. model = genai . GenerativeModel ( model_name = \"gemini-1.5-pro\" ) # Make the LLM request. print ( \"Making LLM inference request...\" ) response = model . generate_content ([ video_file , prompt ], request_options = { \"timeout\" : 600 }) # Print the response, rendering any Markdown Markdown ( response . text ) Refer to timestamps in the content You can use timestamps of the form HH:MM:SS to refer to specific moments in the\nvideo. # Create the prompt. prompt = \"What are the examples given at 01:05 and 01:19 supposed to show us?\" # Choose a Gemini model. model = genai . GenerativeModel ( model_name = \"gemini-1.5-pro\" ) # Make the LLM request. print ( \"Making LLM inference request...\" ) response = model . generate_content ([ video_file , prompt ], request_options = { \"timeout\" : 600 }) print ( response . text ) Transcribe video and provide visual descriptions The Gemini models can transcribe and provide visual descriptions of video content\nby processing both the audio track and visual frames.\nFor visual descriptions, the model samples the video at a rate of 1 frame\nper second . This sampling rate may affect the level of detail in the\ndescriptions, particularly for videos with rapidly changing visuals. # Create the prompt. prompt = \"Transcribe the audio from this video, giving timestamps for salient events in the video. Also provide visual descriptions.\" # Choose a Gemini model. model = genai . GenerativeModel ( model_name = \"gemini-1.5-pro\" ) # Make the LLM request. print ( \"Making LLM inference request...\" ) response = model . generate_content ([ video_file , prompt ], request_options = { \"timeout\" : 600 }) print ( response . text ) List files You can list all files uploaded using the File API and their URIs using files.list . import google.generativeai as genai print ( \"My files:\" ) for f in genai . list_files (): print ( \"  \" , f . name ) files . py Delete files Files uploaded using the File API are automatically deleted after 2 days. You\ncan also manually delete them using files.delete . import google.generativeai as genai myfile = genai . upload_file ( media / \"poem.txt\" ) myfile . delete () try : # Error. model = genai . GenerativeModel ( \"gemini-1.5-flash\" ) result = model . generate_content ([ myfile , \"Describe this file.\" ]) except google . api_core . exceptions . PermissionDenied : pass files . py What's next This guide shows how to upload image and video files using the File API and\nthen generate text outputs from image and video inputs. To learn more,\nsee the following resources: File prompting strategies : The\nGemini API supports prompting with text, image, audio, and video data, also\nknown as multimodal prompting. System instructions : System\ninstructions let you steer the behavior of the model based on your specific\nneeds and use cases. Safety guidance : Sometimes generative AI\nmodels produce unexpected outputs, such as outputs that are inaccurate,\nbiased, or offensive. Post-processing and human evaluation are essential to\nlimit the risk of harm from such outputs. Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License . For details, see the Google Developers Site Policies . Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-11 UTC. Terms Privacy Manage cookies English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어",
            "meta_description": "Get started building with Gemini&#39;s multimodal capabilities in the Gemini API",
            "links": [
                "https://ai.google.dev/gemini-api/docs/vision?lang=python",
                "https://ai.google.dev/gemini-api/docs/vision?lang=python",
                "https://ai.google.dev/gemini-api/docs/vision?lang=python",
                "https://ai.google.dev/gemini-api/docs/vision?lang=python",
                "https://ai.google.dev/gemini-api/docs/vision",
                "https://ai.google.dev/gemini-api/docs/vision",
                "https://ai.google.dev/gemini-api/docs/vision?lang=python"
            ],
            "timestamp": "2024-12-29T12:27:30.707499",
            "status_code": 200
        },
        {
            "url": "https://ai.google.dev/gemini-api/docs/vision",
            "title": "Explore vision capabilities with the Gemini API  |  Google AI for Developers",
            "text_content": "Explore vision capabilities with the Gemini API  |  Google AI for Developers Models Solutions Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Code assistance Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Showcase Gemini Showcase Gemini API Developer Competition Community Google AI Forum Gemini for Research / English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어 Sign in Gemini API docs API Reference SDKs Pricing Cookbook Models Gemini API docs API Reference SDKs Pricing Cookbook Solutions More Code assistance More Showcase More Community More Overview Get started Quickstart API keys Libraries Release notes Developer forum Models Gemini Gemini 2.0 Overview SDKs Thinking Mode Experimental models Capabilities Text generation Vision Audio understanding Long context Code execution Structured output Function calling Intro to function calling Function calling tutorial Extract structured data Document understanding Grounding Grounding with Google Search Use Google Search Suggestions Fine-tuning Intro to fine-tuning Fine-tuning tutorial Embeddings Guides Context caching Image generation Prompt engineering Intro to prompting Prompting strategies File prompting strategies Token counting OpenAI compatibility Billing info Safety Safety settings Safety guidance Additional resources Android (on-device) Firebase extensions Generative models Google AI Studio quickstart LearnLM Migrate to Cloud OAuth authentication Semantic retrieval System instructions Gemini for Research Gemini Academic Program Use cases Applications Code assistant Flutter code generator Content search Data exploration agent Writing assistant Slides reviewer Troubleshooting API troubleshooting AI Studio troubleshooting Google Workspace Request more quota Legal Terms of service Available regions Abuse monitoring Build with Gemini Gemini API Google AI Studio Customize Gemma open models Gemma open models Multi-framework with Keras Fine-tune in Colab Run on-device Google AI Edge Gemini Nano on Android Chrome built-in web APIs Build responsibly Responsible GenAI Toolkit Secure AI Framework Android Studio Chrome DevTools Colab Firebase Google Cloud JetBrains Jules Project IDX VS Code Gemini Showcase Gemini API Developer Competition Google AI Forum Gemini for Research Gemini 2.0 Flash Experimental is now available! Learn more Home Gemini API Models Send feedback Explore vision capabilities with the Gemini API Python Node.js Go REST The Gemini API is able to process images and videos, enabling a multitude of\n exciting developer use cases. Some of Gemini's vision capabilities include\n the ability to: Caption and answer questions about images Transcribe and reason over PDFs, including long documents up to 2 million token context window Describe, segment, and extract information from videos,\nincluding both visual frames and audio, up to 90 minutes long Detect objects in an image and return bounding box coordinates for them This tutorial demonstrates some possible ways to prompt the Gemini API with\nimages and video input, provides code examples,\nand outlines prompting best practices with multimodal vision capabilities.\nAll output is text-only. What's next This guide shows how to upload image and video files using the File API and\nthen generate text outputs from image and video inputs. To learn more,\nsee the following resources: File prompting strategies : The\nGemini API supports prompting with text, image, audio, and video data, also\nknown as multimodal prompting. System instructions : System\ninstructions let you steer the behavior of the model based on your specific\nneeds and use cases. Safety guidance : Sometimes generative AI\nmodels produce unexpected outputs, such as outputs that are inaccurate,\nbiased, or offensive. Post-processing and human evaluation are essential to\nlimit the risk of harm from such outputs. Send feedback Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License , and code samples are licensed under the Apache 2.0 License . For details, see the Google Developers Site Policies . Java is a registered trademark of Oracle and/or its affiliates. Last updated 2024-12-11 UTC. Terms Privacy Manage cookies English Deutsch Español – América Latina Français Indonesia Italiano Polski Português – Brasil Shqip Tiếng Việt Türkçe Русский עברית العربيّة فارسی हिंदी বাংলা ภาษาไทย 中文 – 简体 中文 – 繁體 日本語 한국어",
            "meta_description": "Get started building with Gemini&#39;s multimodal capabilities in the Gemini API",
            "links": [
                "https://ai.google.dev/gemini-api/docs/vision",
                "https://ai.google.dev/gemini-api/docs/vision",
                "https://ai.google.dev/gemini-api/docs/vision",
                "https://ai.google.dev/gemini-api/docs/vision",
                "https://ai.google.dev/gemini-api/docs/vision",
                "https://ai.google.dev/gemini-api/docs/vision"
            ],
            "timestamp": "2024-12-29T12:27:31.618863",
            "status_code": 200
        }
    ]
}