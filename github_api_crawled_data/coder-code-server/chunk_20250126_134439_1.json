{
  "metadata": {
    "repo": "coder/code-server",
    "base_path": "docs",
    "crawled_at": "2025-01-26T13:44:39.691785"
  },
  "documents": [
    {
      "path": "docs/CODE_OF_CONDUCT.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/CODE_OF_CONDUCT.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# Contributor Covenant Code of Conduct\n\n- [Contributor Covenant Code of Conduct](#contributor-covenant-code-of-conduct)\n  - [Our Pledge](#our-pledge)\n  - [Our Standards](#our-standards)\n  - [Our Responsibilities](#our-responsibilities)\n  - [Scope](#scope)\n  - [Enforcement](#enforcement)\n  - [Attribution](#attribution)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n- Using welcoming and inclusive language\n- Being respectful of differing viewpoints and experiences\n- Gracefully accepting constructive criticism\n- Focusing on what is best for the community\n- Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n- Trolling, insulting/derogatory comments, and personal or political attacks\n- Public or private harassment\n- Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n- Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at opensource@coder.com. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n",
      "sha": "168eac481bb7f63d619f92ae43f87466e6c46155",
      "size": 3965,
      "timestamp": "2025-01-26T13:44:19.085229"
    },
    {
      "path": "docs/CONTRIBUTING.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/CONTRIBUTING.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# Contributing\n\n- [Requirements](#requirements)\n  - [Linux-specific requirements](#linux-specific-requirements)\n- [Development workflow](#development-workflow)\n  - [Version updates to Code](#version-updates-to-code)\n  - [Patching Code](#patching-code)\n  - [Build](#build)\n    - [Creating a Standalone Release](#creating-a-standalone-release)\n  - [Troubleshooting](#troubleshooting)\n    - [I see \"Forbidden access\" when I load code-server in the browser](#i-see-forbidden-access-when-i-load-code-server-in-the-browser)\n    - [\"Can only have one anonymous define call per script\"](#can-only-have-one-anonymous-define-call-per-script)\n  - [Help](#help)\n- [Test](#test)\n  - [Unit tests](#unit-tests)\n  - [Script tests](#script-tests)\n  - [Integration tests](#integration-tests)\n  - [End-to-end tests](#end-to-end-tests)\n- [Structure](#structure)\n  - [Modifications to Code](#modifications-to-code)\n  - [Currently Known Issues](#currently-known-issues)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\n## Requirements\n\nThe prerequisites for contributing to code-server are almost the same as those\nfor [VS Code](https://github.com/Microsoft/vscode/wiki/How-to-Contribute#prerequisites).\nHere is what is needed:\n\n- `node` v20.x\n- `git` v2.x or greater\n- [`git-lfs`](https://git-lfs.github.com)\n- [`npm`](https://www.npmjs.com/)\n  - Used to install JS packages and run scripts\n- [`nfpm`](https://nfpm.goreleaser.com/)\n  - Used to build `.deb` and `.rpm` packages\n- [`jq`](https://stedolan.github.io/jq/)\n  - Used to build code-server releases\n- [`gnupg`](https://gnupg.org/index.html)\n  - All commits must be signed and verified; see GitHub's [Managing commit\n    signature\n    verification](https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification)\n    or follow [this tutorial](https://joeprevite.com/verify-commits-on-github)\n- `quilt`\n  - Used to manage patches to Code\n- `rsync` and `unzip`\n  - Used for code-server releases\n- `bats`\n  - Used to run script unit tests\n\n### Linux-specific requirements\n\nIf you're developing code-server on Linux, make sure you have installed or\ninstall the following dependencies:\n\n```shell\nsudo apt-get install build-essential g++ libx11-dev libxkbfile-dev libsecret-1-dev libkrb5-dev python-is-python3\n```\n\nThese are required by Code. See [their Wiki](https://github.com/microsoft/vscode/wiki/How-to-Contribute#prerequisites)\nfor more information.\n\n## Development workflow\n\n1. `git clone https://github.com/coder/code-server.git` - Clone `code-server`\n2. `git submodule update --init` - Clone `vscode` submodule\n3. `quilt push -a` - Apply patches to the `vscode` submodule.\n4. `npm install` - Install dependencies\n5. `npm run watch` - Launch code-server localhost:8080. code-server will be live\n   reloaded when changes are made; the browser needs to be refreshed manually.\n\nWhen pulling down changes that include modifications to the patches you will\nneed to apply them with `quilt`. If you pull down changes that update the\n`vscode` submodule you will need to run `git submodule update --init` and\nre-apply the patches.\n\nWhen you make a change that affects people deploying the marketplace please\nupdate the changelog as part of your PR.\n\nNote that building code-server takes a very, very long time, and loading it in\nthe browser in development mode also takes a very, very long time.\n\nDisplay language (Spanish, etc) support only works in a full build; it will not\nwork in development mode.\n\nGenerally we prefer that PRs be squashed into `main` but you can rebase or merge\nif it is important to keep the individual commits (make sure to clean up the\ncommits first if you are doing this).\n\n### Version updates to Code\n\n1. Remove any patches with `quilt pop -a`.\n2. Update the `lib/vscode` submodule to the desired upstream version branch.\n   1. `cd lib/vscode && git checkout release/1.66 && cd ../..`\n   2. `git add lib && git commit -m \"chore: update to Code <version>\"`\n3. Apply the patches one at a time (`quilt push`). If the application succeeds\n   but the lines changed, update the patch with `quilt refresh`. If there are\n   conflicts, then force apply with `quilt push -f`, manually add back the\n   rejected code, then run `quilt refresh`.\n4. From the code-server **project root**, run `npm install`.\n5. Check the Node.js version that's used by Electron (which is shipped with VS\n   Code. If necessary, update our version of Node.js to match.\n\n### Patching Code\n\n1. You can go through the patch stack with `quilt push` and `quilt pop`.\n2. Create a new patch (`quilt new {name}.diff`) or use an existing patch.\n3. Add the file(s) you are patching (`quilt add [-P patch] {file}`). A file\n   **must** be added before you make changes to it.\n4. Make your changes. Patches do not need to be independent of each other but\n   each patch must result in a working code-server without any broken in-between\n   states otherwise they are difficult to test and modify.\n5. Add your changes to the patch (`quilt refresh`)\n6. Add a comment in the patch about the reason for the patch and how to\n   reproduce the behavior it fixes or adds. Every patch should have an e2e test\n   as well.\n\n### Build\n\nYou can build a full production as follows:\n\n```shell\ngit submodule update --init\nquilt push -a\nnpm install\nnpm run build\nVERSION=0.0.0 npm run build:vscode\nnpm run release\n```\n\nThis does not keep `node_modules`. If you want them to be kept, use\n`KEEP_MODULES=1 npm run release`\n\nRun your build:\n\n```shell\ncd release\nnpm install --omit=dev # Skip if you used KEEP_MODULES=1\n# Runs the built JavaScript with Node.\nnode .\n```\n\nThen, to build the release package:\n\n```shell\nnpm run release:standalone\nnpm run test:integration\nnpm run package\n```\n\n> On Linux, the currently running distro will become the minimum supported\n> version. In our GitHub Actions CI, we use CentOS 8 for maximum compatibility.\n> If you need your builds to support older distros, run the build commands\n> inside a Docker container with all the build requirements installed.\n\n#### Creating a Standalone Release\n\nPart of the build process involves creating standalone releases. At the time of\nwriting, we do this for the following platforms/architectures:\n\n- Linux amd64 (.tar.gz, .deb, and .rpm)\n- Linux arm64 (.tar.gz, .deb, and .rpm)\n- Linux arm7l (.tar.gz)\n- Linux armhf.deb\n- Linux armhf.rpm\n- macOS arm64.tar.gz\n\nCurrently, these are compiled in CI using the `npm run release:standalone`\ncommand in the `release.yaml` workflow. We then upload them to the draft release\nand distribute via GitHub Releases.\n\n### Troubleshooting\n\n#### I see \"Forbidden access\" when I load code-server in the browser\n\nThis means your patches didn't apply correctly. We have a patch to remove the\nauth from vanilla Code because we use our own.\n\nTry popping off the patches with `quilt pop -a` and reapplying with `quilt push\n-a`.\n\n#### \"Can only have one anonymous define call per script\"\n\nCode might be trying to use a dev or prod HTML in the wrong context. You can try\nre-running code-server and setting `VSCODE_DEV=1`.\n\n### Help\n\nIf you get stuck or need help, you can always start a new GitHub Discussion\n[here](https://github.com/coder/code-server/discussions). One of the maintainers\nwill respond and help you out.\n\n## Test\n\nThere are four kinds of tests in code-server:\n\n1. Unit tests\n2. Script tests\n3. Integration tests\n4. End-to-end tests\n\n### Unit tests\n\nOur unit tests are written in TypeScript and run using\n[Jest](https://jestjs.io/), the testing framework].\n\nThese live under [test/unit](../test/unit).\n\nWe use unit tests for functions and things that can be tested in isolation. The\nfile structure is modeled closely after `/src` so it's easy for people to know\nwhere test files should live.\n\n### Script tests\n\nOur script tests are written in bash and run using [bats](https://github.com/bats-core/bats-core).\n\nThese tests live under `test/scripts`.\n\nWe use these to test anything related to our scripts (most of which live under\n`ci`).\n\n### Integration tests\n\nThese are a work in progress. We build code-server and run tests with `npm run\ntest:integration`, which ensures that code-server builds work on their\nrespective platforms.\n\nOur integration tests look at components that rely on one another. For example,\ntesting the CLI requires us to build and package code-server.\n\n### End-to-end tests\n\nThe end-to-end (e2e) tests are written in TypeScript and run using\n[Playwright](https://playwright.dev/).\n\nThese live under [test/e2e](../test/e2e).\n\nBefore the e2e tests run, we run `globalSetup`, which eliminates the need to log\nin before each test by preserving the authentication state.\n\nTake a look at `codeServer.test.ts` to see how you would use it (see\n`test.use`).\n\nWe also have a model where you can create helpers to use within tests. See\n[models/CodeServer.ts](../test/e2e/models/CodeServer.ts) for an example.\n\n## Structure\n\ncode-server essentially serves as an HTTP API for logging in and starting a\nremote Code process.\n\nThe CLI code is in [src/node](../src/node) and the HTTP routes are implemented\nin [src/node/routes](../src/node/routes).\n\nMost of the meaty parts are in the Code portion of the codebase under\n[lib/vscode](../lib/vscode), which we describe next.\n\n### Modifications to Code\n\nOur modifications to Code can be found in the [patches](../patches) directory.\nWe pull in Code as a submodule pointing to an upstream release branch.\n\nIn v1 of code-server, we had Code as a submodule and used a single massive patch\nthat split the codebase into a front-end and a server. The front-end consisted\nof the UI code, while the server ran the extensions and exposed an API to the\nfront-end for file access and all UI needs.\n\nOver time, Microsoft added support to Code to run it on the web. They had made\nthe front-end open source, but not the server. As such, code-server v2 (and\nlater) uses the Code front-end and implements the server. We did this by using a\nGit subtree to fork and modify Code.\n\nMicrosoft eventually made the server open source and we were able to reduce our\nchanges significantly. Some time later we moved back to a submodule and patches\n(managed by `quilt` this time instead of the mega-patch).\n\nAs the web portion of Code continues to mature, we'll be able to shrink and\npossibly eliminate our patches. In the meantime, upgrading the Code version\nrequires us to ensure that our changes are still applied correctly and work as\nintended. In the future, we'd like to run Code unit tests against our builds to\nensure that features work as expected.\n\n> We have [extension docs](../ci/README.md) on the CI and build system.\n\nIf the functionality you're working on does NOT depend on code from Code, please\nmove it out and into code-server.\n\n### Currently Known Issues\n\n- Creating custom Code extensions and debugging them doesn't work\n- Extension profiling and tips are currently disabled\n",
      "sha": "9d6c413c4ff4e5beed9f987a7255dea76f67fb79",
      "size": 11100,
      "timestamp": "2025-01-26T13:44:20.049193"
    },
    {
      "path": "docs/FAQ.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/FAQ.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# FAQ\n\n- [Questions?](#questions)\n- [How should I expose code-server to the internet?](#how-should-i-expose-code-server-to-the-internet)\n- [Can I use code-server on the iPad?](#can-i-use-code-server-on-the-ipad)\n- [How does the config file work?](#how-does-the-config-file-work)\n- [How do I make my keyboard shortcuts work?](#how-do-i-make-my-keyboard-shortcuts-work)\n- [Why can't code-server use Microsoft's extension marketplace?](#why-cant-code-server-use-microsofts-extension-marketplace)\n- [How can I request an extension that's missing from the marketplace?](#how-can-i-request-an-extension-thats-missing-from-the-marketplace)\n- [How do I install an extension?](#how-do-i-install-an-extension)\n- [How do I install an extension manually?](#how-do-i-install-an-extension-manually)\n- [How do I use my own extensions marketplace?](#how-do-i-use-my-own-extensions-marketplace)\n- [Where are extensions stored?](#where-are-extensions-stored)\n- [Where is VS Code configuration stored?](#where-is-vs-code-configuration-stored)\n- [How can I reuse my VS Code configuration?](#how-can-i-reuse-my-vs-code-configuration)\n- [How does code-server decide what workspace or folder to open?](#how-does-code-server-decide-what-workspace-or-folder-to-open)\n- [How do I access my Documents/Downloads/Desktop folders in code-server on macOS?](#how-do-i-access-my-documentsdownloadsdesktop-folders-in-code-server-on-macos)\n- [How do I direct server-side requests through a proxy?](#how-do-i-direct-server-side-requests-through-a-proxy)\n- [How do I debug issues with code-server?](#how-do-i-debug-issues-with-code-server)\n- [What is the healthz endpoint?](#what-is-the-healthz-endpoint)\n- [What is the heartbeat file?](#what-is-the-heartbeat-file)\n- [How do I change the password?](#how-do-i-change-the-password)\n- [Can I store my password hashed?](#can-i-store-my-password-hashed)\n- [Is multi-tenancy possible?](#is-multi-tenancy-possible)\n- [Can I use Docker in a code-server container?](#can-i-use-docker-in-a-code-server-container)\n- [How do I disable telemetry?](#how-do-i-disable-telemetry)\n- [What's the difference between code-server and Coder?](#whats-the-difference-between-code-server-and-coder)\n- [What's the difference between code-server and Theia?](#whats-the-difference-between-code-server-and-theia)\n- [What's the difference between code-server and OpenVSCode-Server?](#whats-the-difference-between-code-server-and-openvscode-server)\n- [What's the difference between code-server and GitHub Codespaces?](#whats-the-difference-between-code-server-and-github-codespaces)\n- [Does code-server have any security login validation?](#does-code-server-have-any-security-login-validation)\n- [Are there community projects involving code-server?](#are-there-community-projects-involving-code-server)\n- [How do I change the port?](#how-do-i-change-the-port)\n- [How do I hide the coder/coder promotion in Help: Getting Started?](#how-do-i-hide-the-codercoder-promotion-in-help-getting-started)\n- [How do I disable the proxy?](#how-do-i-disable-the-proxy)\n- [How do I disable file download?](#how-do-i-disable-file-download)\n- [Why do web views not work?](#why-do-web-views-not-work)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\n## Questions?\n\nPlease file all questions and support requests at\n<https://github.com/coder/code-server/discussions>.\n\n## How should I expose code-server to the internet?\n\nPlease see [our instructions on exposing code-server safely to the\ninternet](./guide.md).\n\n## Can I use code-server on the iPad?\n\nSee [iPad](./ipad.md) for information on using code-server on the iPad.\n\n## How does the config file work?\n\nWhen `code-server` starts up, it creates a default config file in `~/.config/code-server/config.yaml`:\n\n```yaml\nbind-addr: 127.0.0.1:8080\nauth: password\npassword: mew...22 # Randomly generated for each config.yaml\ncert: false\n```\n\nThe default config defines the following behavior:\n\n- Listen on the loopback IP port 8080\n- Enable password authorization\n- Do not use TLS\n\nEach key in the file maps directly to a `code-server` flag (run `code-server --help` to see a listing of all the flags). Any flags passed to `code-server`\nwill take priority over the config file.\n\nYou can change the config file's location using the `--config` flag or\n`$CODE_SERVER_CONFIG` environment variable.\n\nThe default location respects `$XDG_CONFIG_HOME`.\n\n## How do I make my keyboard shortcuts work?\n\nMany shortcuts will not work by default, since they'll be \"caught\" by the browser.\n\nIf you use Chrome, you can work around this by installing the progressive web\napp (PWA):\n\n1. Start the editor\n2. Click the **plus** icon in the URL toolbar to install the PWA\n\nIf you use Firefox, you can use the appropriate extension to install PWA.\n\n1. Go to the installation [website](https://addons.mozilla.org/en-US/firefox/addon/pwas-for-firefox/) of the add-on\n2. Add the add-on to Firefox\n3. Follow the os-specific instructions on how to install the runtime counterpart\n\nFor other browsers, you'll have to remap keybindings for shortcuts to work.\n\n## Why can't code-server use Microsoft's extension marketplace?\n\nThough code-server takes the open-source core of VS Code and allows you to run\nit in the browser, it is not entirely equivalent to Microsoft's VS Code.\n\nOne major difference is in regards to extensions and the marketplace. The core\nof VS code is open source, while the marketplace and many published Microsoft\nextensions are not. Furthermore, Microsoft prohibits the use of any\nnon-Microsoft VS Code from accessing their marketplace. Per the [Terms of\nService](https://cdn.vsassets.io/v/M146_20190123.39/_content/Microsoft-Visual-Studio-Marketplace-Terms-of-Use.pdf):\n\n> Marketplace Offerings are intended for use only with Visual Studio Products\n> and Services, and you may only install and use Marketplace Offerings with\n> Visual Studio Products and Services.\n\nBecause of this, we can't offer any extensions on Microsoft's marketplace.\nInstead, we use the [Open-VSX extension gallery](https://open-vsx.org), which is also used by various other forks.\nIt isn't perfect, but its getting better by the day with more and more extensions.\n\nWe also offer our own marketplace for open source extensions, but plan to\ndeprecate it at a future date and completely migrate to Open-VSX.\n\nThese are the closed-source extensions that are presently unavailable:\n\n1. [Live Share](https://visualstudio.microsoft.com/services/live-share). We may\n   implement something similar (see\n   [#33](https://github.com/coder/code-server/issues/33))\n1. [Remote Extensions (SSH, Containers,\n   WSL)](https://github.com/microsoft/vscode-remote-release). We may implement\n   these again at some point, see\n   ([#1315](https://github.com/coder/code-server/issues/1315)).\n\nFor more about the closed source portions of VS Code, see [vscodium/vscodium](https://github.com/VSCodium/vscodium#why-does-this-exist).\n\n## How can I request an extension that's missing from the marketplace?\n\nTo add an extension to Open-VSX, please see [open-vsx/publish-extensions](https://github.com/open-vsx/publish-extensions).\nWe no longer plan to add new extensions to our legacy extension gallery.\n\n## How do I install an extension?\n\nYou can install extensions from the marketplace using the extensions sidebar in\ncode-server or from the command line:\n\n```console\ncode-server --install-extension <extension id>\n# example: code-server --install-extension wesbos.theme-cobalt2\n\n# From the Coder extension marketplace\ncode-server --install-extension ms-python.python\n\n# From a downloaded VSIX on the file system\ncode-server --install-extension downloaded-ms-python.python.vsix\n```\n\n## How do I install an extension manually?\n\nIf there's an extension unavailable in the marketplace or an extension that\ndoesn't work, you can download the VSIX from its GitHub releases or build it\nyourself.\n\nOnce you have downloaded the VSIX to the remote machine, you can either:\n\n- Run the **Extensions: Install from VSIX** command in the Command Palette.\n- Run `code-server --install-extension <path to vsix>` in the terminal\n\nYou can also download extensions using the command line. For instance,\ndownloading from OpenVSX can be done like this:\n\n```shell\ncode-server --install-extension <extension id>\n```\n\n## How do I use my own extensions marketplace?\n\nIf you own a marketplace that implements the VS Code Extension Gallery API, you\ncan point code-server to it by setting `$EXTENSIONS_GALLERY`.\nThis corresponds directly with the `extensionsGallery` entry in in VS Code's `product.json`.\n\nFor example:\n\n```bash\nexport EXTENSIONS_GALLERY='{\"serviceUrl\": \"https://my-extensions/api\"}'\n```\n\nThough you can technically use Microsoft's marketplace in this manner, we\nstrongly discourage you from doing so since this is [against their Terms of Use](#why-cant-code-server-use-microsofts-extension-marketplace).\n\nFor further information, see [this\ndiscussion](https://github.com/microsoft/vscode/issues/31168#issue-244533026)\nregarding the use of the Microsoft URLs in forks, as well as [VSCodium's\ndocs](https://github.com/VSCodium/vscodium/blob/master/DOCS.md#extensions--marketplace).\n\n## Where are extensions stored?\n\nExtensions are stored in `~/.local/share/code-server/extensions` by default.\n\nOn Linux and macOS if you set the `XDG_DATA_HOME` environment variable, the\nextensions directory will be `$XDG_DATA_HOME/code-server/extensions`. In\ngeneral, we try to follow the XDG directory spec.\n\n## Where is VS Code configuration stored?\n\nVS Code configuration such as settings and keybindings are stored in\n`~/.local/share/code-server` by default.\n\nOn Linux and macOS if you set the `XDG_DATA_HOME` environment variable, the data\ndirectory will be `$XDG_DATA_HOME/code-server`. In general, we try to follow the\nXDG directory spec.\n\n## How can I reuse my VS Code configuration?\n\nYou can use the [Settings\nSync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync)\nextension for this purpose.\n\nAlternatively, you can also pass `--user-data-dir ~/.vscode` or copy `~/.vscode`\ninto `~/.local/share/code-server` to reuse your existing VS Code extensions and\nconfiguration.\n\n## How does code-server decide what workspace or folder to open?\n\ncode-server tries the following in this order:\n\n1. The `workspace` query parameter\n2. The `folder` query parameter\n3. The workspace or directory passed via the command line\n4. The last opened workspace or directory\n\n## How do I access my Documents/Downloads/Desktop folders in code-server on macOS?\n\nNewer versions of macOS require permission through a non-UNIX mechanism for\ncode-server to access the Desktop, Documents, Pictures, Downloads, and other folders.\n\nYou may have to give Node.js full disk access, since it doesn't implement any of the macOS permission request features natively:\n\n1. Find where Node.js is installed on your machine\n\n   ```console\n   $ which node\n   /usr/local/bin/node\n   ```\n\n2. Grant Node.js full disk access. Open **System Preferences** > **Security &\n   Privacy** > **Privacy** > **Full Disk Access**. Then, click the 🔒 to unlock,\n   click **+**, and select the Node.js binary you located in the previous step.\n\nSee [#2794](https://github.com/coder/code-server/issues/2794) for additional context.\n\n## How do I direct server-side requests through a proxy?\n\n> code-server proxies only server-side requests.\n\nTo direct server-side requests through a proxy, code-server supports the\nfollowing environment variables:\n\n- `$HTTP_PROXY`\n- `$HTTPS_PROXY`\n- `$NO_PROXY`\n\n```sh\nexport HTTP_PROXY=https://134.8.5.4\nexport HTTPS_PROXY=https://134.8.5.4\n# Now all of code-server's server side requests will go through\n# https://134.8.5.4 first.\ncode-server\n```\n\n- See\n  [proxy-from-env](https://www.npmjs.com/package/proxy-from-env#environment-variables)\n  for a detailed reference on these environment variables and their syntax (note\n  that code-server only uses the `http` and `https` protocols).\n- See [proxy-agent](https://www.npmjs.com/package/proxy-agent) for information\n  on on the supported proxy protocols.\n\n## How do I debug issues with code-server?\n\nFirst, run code-server with the `debug` logging (or `trace` to be really\nthorough) by setting the `--log` flag or the `LOG_LEVEL` environment variable.\n`-vvv` and `--verbose` are aliases for `--log trace`.\n\nFirst, run code-server with `debug` logging (or `trace` logging for more\nthorough messages) by setting the `--log` flag or the `LOG_LEVEL` environment\nvariable.\n\n```text\ncode-server --log debug\n```\n\n> Note that the `-vvv` and `--verbose` flags are aliases for `--log trace`.\n\nNext, replicate the issue you're having so that you can collect logging\ninformation from the following places:\n\n1. The most recent files from `~/.local/share/code-server/coder-logs`\n2. The browser console\n3. The browser network tab\n\nAdditionally, collecting core dumps (you may need to enable them first) if\ncode-server crashes can be helpful.\n\n## What is the healthz endpoint?\n\nYou can use the `/healthz` endpoint exposed by code-server to check whether\ncode-server is running without triggering a heartbeat. The response includes a\nstatus (e.g., `alive` or `expired`) and a timestamp for the last heartbeat\n(the default is `0`).\n\n```json\n{\n  \"status\": \"alive\",\n  \"lastHeartbeat\": 1599166210566\n}\n```\n\nThis endpoint doesn't require authentication.\n\n## What is the heartbeat file?\n\nAs long as there is an active browser connection, code-server touches\n`~/.local/share/code-server/heartbeat` once a minute.\n\nIf you want to shutdown code-server if there hasn't been an active connection\nafter a predetermined amount of time, you can do so by checking continuously for\nthe last modified time on the heartbeat file. If it is older than X minutes (or\nwhatever amount of time you'd like), you can kill code-server.\n\nEventually, [#1636](https://github.com/coder/code-server/issues/1636) will make\nthis process better.\n\n## How do I change the password?\n\nEdit the `password` field in the code-server config file at\n`~/.config/code-server/config.yaml`, then restart code-server:\n\n```bash\nsudo systemctl restart code-server@$USER\n```\n\n## Can I store my password hashed?\n\nYes, you can do so by setting the value of `hashed-password` instead of `password`. Generate the hash with:\n\n```shell\necho -n \"thisismypassword\" | npx argon2-cli -e\n$argon2i$v=19$m=4096,t=3,p=1$wst5qhbgk2lu1ih4dmuxvg$ls1alrvdiwtvzhwnzcm1dugg+5dto3dt1d5v9xtlws4\n```\n\nReplace `thisismypassword` with your actual password and **remember to put it\ninside quotes**! For example:\n\n```yaml\nauth: password\nhashed-password: \"$argon2i$v=19$m=4096,t=3,p=1$wST5QhBgk2lu1ih4DMuxvg$LS1alrVdIWtvZHwnzCM1DUGg+5DTO3Dt1d5v9XtLws4\"\n```\n\nThe `hashed-password` field takes precedence over `password`.\n\nIf you're using Docker Compose file, in order to make this work, you need to change all the single $ to $$. For example:\n\n```yaml\n- HASHED_PASSWORD=$$argon2i$$v=19$$m=4096,t=3,p=1$$wST5QhBgk2lu1ih4DMuxvg$$LS1alrVdIWtvZHwnzCM1DUGg+5DTO3Dt1d5v9XtLws4\n```\n\n## Is multi-tenancy possible?\n\nIf you want to run multiple code-servers on shared infrastructure, we recommend\nusing virtual machines (provide one VM per user). This will easily allow users\nto run a Docker daemon. If you want to use Kubernetes, you'll want to\nuse [kubevirt](https://kubevirt.io) or\n[sysbox](https://github.com/nestybox/sysbox) to give each user a VM-like\nexperience instead of just a container.\n\n## Can I use Docker in a code-server container?\n\nIf you'd like to access Docker inside of code-server, mount the Docker socket in\nfrom `/var/run/docker.sock`. Then, install the Docker CLI in the code-server\ncontainer, and you should be able to access the daemon.\n\nYou can even make volume mounts work. Let's say you want to run a container and\nmount into `/home/coder/myproject` from inside the `code-server` container. You\nneed to make sure the Docker daemon's `/home/coder/myproject` is the same as the\none mounted inside the `code-server` container, and the mount will work.\n\n## How do I disable telemetry?\n\nUse the `--disable-telemetry` flag to disable telemetry.\n\n> We use the data collected only to improve code-server.\n\n## What's the difference between code-server and Coder?\n\ncode-server and Coder are both applications that can be installed on any\nmachine. The main difference is who they serve. Out of the box, code-server is\nsimply VS Code in the browser while Coder is a tool for provisioning remote\ndevelopment environments via Terraform.\n\ncode-server was built for individuals while Coder was built for teams. In Coder, you create Workspaces which can have applications like code-server. If you're looking for a team solution, you should reach for [Coder](https://github.com/coder/coder).\n\n## What's the difference between code-server and Theia?\n\nAt a high level, code-server is a patched fork of VS Code that runs in the\nbrowser whereas Theia takes some parts of VS Code but is an entirely different\neditor.\n\n[Theia](https://github.com/eclipse-theia/theia) is a browser IDE loosely based\non VS Code. It uses the same text editor library\n([Monaco](https://github.com/Microsoft/monaco-editor)) and extension API, but\neverything else is different. Theia also uses [Open VSX](https://open-vsx.org)\nfor extensions.\n\nTheia doesn't allow you to reuse your existing VS Code config.\n\n## What's the difference between code-server and OpenVSCode-Server?\n\ncode-server and OpenVSCode-Server both allow you to access VS Code via a\nbrowser. OpenVSCode-Server is a direct fork of VS Code with changes comitted\ndirectly while code-server pulls VS Code in via a submodule and makes changes\nvia patch files.\n\nHowever, OpenVSCode-Server is scoped at only making VS Code available as-is in\nthe web browser. code-server contains additional changes to make the self-hosted\nexperience better (see the next section for details).\n\n## What's the difference between code-server and GitHub Codespaces?\n\nBoth code-server and GitHub Codespaces allow you to access VS Code via a\nbrowser. GitHub Codespaces, however, is a closed-source, paid service offered by\nGitHub and Microsoft.\n\nOn the other hand, code-server is self-hosted, free, open-source, and can be run\non any machine with few limitations.\n\nSpecific changes include:\n\n- Password authentication\n- The ability to host at sub-paths\n- Self-contained web views that do not call out to Microsoft's servers\n- The ability to use your own marketplace and collect your own telemetry\n- Built-in proxy for accessing ports on the remote machine integrated into\n  VS Code's ports panel\n- Wrapper process that spawns VS Code on-demand and has a separate CLI\n- Notification when updates are available\n- [Some other things](https://github.com/coder/code-server/tree/main/patches)\n\nSome of these changes appear very unlikely to ever be adopted by Microsoft.\nSome may make their way upstream, further closing the gap, but at the moment it\nlooks like there will always be some subtle differences.\n\n## Does code-server have any security login validation?\n\ncode-server supports setting a single password and limits logins to two per\nminute plus an additional twelve per hour.\n\n## Are there community projects involving code-server?\n\nVisit the [awesome-code-server](https://github.com/coder/awesome-code-server)\nrepository to view community projects and guides with code-server! Feel free to\nadd your own!\n\n## How do I change the port?\n\nThere are two ways to change the port on which code-server runs:\n\n1. with an environment variable e.g. `PORT=3000 code-server`\n2. using the flag `--bind-addr` e.g. `code-server --bind-addr localhost:3000`\n\n## How do I hide the coder/coder promotion in Help: Getting Started?\n\nYou can pass the flag `--disable-getting-started-override` to `code-server` or\nyou can set the environment variable `CS_DISABLE_GETTING_STARTED_OVERRIDE=1` or\n`CS_DISABLE_GETTING_STARTED_OVERRIDE=true`.\n\n## How do I disable the proxy?\n\nYou can pass the flag `--disable-proxy` to `code-server` or\nyou can set the environment variable `CS_DISABLE_PROXY=1` or\n`CS_DISABLE_PROXY=true`.\n\nNote, this option currently only disables the proxy routes to forwarded ports, including\nthe domain and path proxy routes over HTTP and WebSocket; however, it does not\ndisable the automatic port forwarding in the VS Code workbench itself. In other words,\nuser will still see the Ports tab and notifications, but will not be able to actually\nuse access the ports. It is recommended to set `remote.autoForwardPorts` to `false`\nwhen using the option.\n\n## How do I disable file download?\n\nYou can pass the flag `--disable-file-downloads` to `code-server`\n\n## Why do web views not work?\n\nWeb views rely on service workers, and service workers are only available in a\nsecure context, so most likely the answer is that you are using an insecure\ncontext (for example an IP address).\n\nIf this happens, in the browser log you will see something like:\n\n> Error loading webview: Error: Could not register service workers: SecurityError: Failed to register a ServiceWorker for scope with script: An SSL certificate error occurred when fetching the script..\n\nTo fix this, you must either:\n\n- Access over localhost/127.0.0.1 which is always considered secure.\n- Use a domain with a real certificate (for example with Let's Encrypt).\n- Use a trusted self-signed certificate with [mkcert](https://mkcert.dev) (or\n  create and trust a certificate manually).\n- Disable security if your browser allows it. For example, in Chromium see\n  `chrome://flags/#unsafely-treat-insecure-origin-as-secure`\n",
      "sha": "c46c003b8800ab66f4d9d8c4c62b0231ee336e90",
      "size": 21712,
      "timestamp": "2025-01-26T13:44:21.132685"
    },
    {
      "path": "docs/MAINTAINING.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/MAINTAINING.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# Maintaining\n\n- [Releasing](#releasing)\n    - [Release Candidates](#release-candidates)\n    - [AUR](#aur)\n    - [Docker](#docker)\n    - [Homebrew](#homebrew)\n    - [nixpkgs](#nixpkgs)\n    - [npm](#npm)\n- [Testing](#testing)\n- [Documentation](#documentation)\n  - [Troubleshooting](#troubleshooting)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\nWe keep code-server up to date with VS Code releases (there are usually two or\nthree a month) but we are not generally actively developing code-server aside\nfrom fixing regressions.\n\nMost of the work is keeping on top of issues and discussions.\n\n## Releasing\n\n1. Check that the changelog lists all the important changes.\n2. Make sure the changelog entry lists the current version of VS Code.\n3. Update the changelog with the release date.\n4. Go to GitHub Actions > Draft release > Run workflow on the commit you want to\n   release. Make sure CI has finished the build workflow on that commit or this\n   will fail. For the version we match VS Code's minor and patch version. The\n   patch number may become temporarily out of sync if we need to put out a\n   patch, but if we make our own minor change then we will not release it until\n   the next minor VS Code release.\n5. CI will automatically grab the build artifact on that commit (which is why CI\n   has to have completed), inject the provided version into the `package.json`,\n   put together platform-specific packages, and upload those packages to a draft\n   release.\n6. Update the resulting draft release with the changelog contents.\n7. Publish the draft release after validating it.\n8. Bump the Helm chart version once the Docker images have published.\n\n#### Release Candidates\n\nWe prefer to do release candidates so the community can test things before a\nfull-blown release. To do this follow the same steps as above but:\n\n1. Add a `-rc.<number>` suffix to the version.\n2. When you publish the release select \"pre-release\". CI will not automatically\n   publish pre-releases.\n3. Do not update the chart version or merge in the changelog until the final\n   release.\n\n#### AUR\n\nWe publish to AUR as a package [here](https://aur.archlinux.org/packages/code-server/). This process is manual and can be done by following the steps in [this repo](https://github.com/coder/code-server-aur).\n\n#### Docker\n\nWe publish code-server as a Docker image [here](https://hub.docker.com/r/codercom/code-server), tagging it both with the version and latest.\n\nThis is currently automated with the release process.\n\n#### Homebrew\n\nWe publish code-server on Homebrew [here](https://github.com/Homebrew/homebrew-core/blob/master/Formula/code-server.rb).\n\nThis is currently automated with the release process (but may fail occasionally). If it does, run this locally:\n\n```shell\n# Replace VERSION with version\nbrew bump-formula-pr --version=\"${VERSION}\" code-server --no-browse --no-audit\n```\n\n#### nixpkgs\n\nWe publish code-server in nixpkgs but it must be updated manually.\n\n#### npm\n\nWe publish code-server as a npm package [here](https://www.npmjs.com/package/code-server/v/latest).\n\nThis is currently automated with the release process.\n\n## Testing\n\nOur testing structure is laid out under our [Contributing docs](https://coder.com/docs/code-server/latest/CONTRIBUTING#test).\n\nIf you're ever looking to add more tests, here are a few ways to get started:\n\n- run `npm run test:unit` and look at the coverage chart. You'll see all the\n  uncovered lines. This is a good place to start.\n- look at `test/scripts` to see which scripts are tested. We can always use more\n  tests there.\n- look at `test/e2e`. We can always use more end-to-end tests.\n\nOtherwise, talk to a current maintainer and ask which part of the codebase is\nlacking most when it comes to tests.\n\n## Documentation\n\n### Troubleshooting\n\nOur docs are hosted on [Vercel](https://vercel.com/). Vercel only shows logs in\nrealtime, which means you need to have the logs open in one tab and reproduce\nyour error in another tab. Since our logs are private to Coder the organization,\nyou can only follow these steps if you're a Coder employee. Ask a maintainer for\nhelp if you need it.\n\nTaking a real scenario, let's say you wanted to troubleshoot [this docs\nchange](https://github.com/coder/code-server/pull/4042). Here is how you would\ndo it:\n\n1. Go to https://vercel.com/codercom/codercom\n2. Click \"View Function Logs\"\n3. In a separate tab, open the preview link from github-actions-bot\n4. Now look at the function logs and see if there are errors in the logs\n",
      "sha": "c1faf045b2adad5d22370f031102a42c6e4789a2",
      "size": 4740,
      "timestamp": "2025-01-26T13:44:22.137316"
    },
    {
      "path": "docs/README.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/README.md",
      "content": "# code-server\n\n[![\"GitHub Discussions\"](https://img.shields.io/badge/%20GitHub-%20Discussions-gray.svg?longCache=true&logo=github&colorB=purple)](https://github.com/coder/code-server/discussions) [![\"Join us on Slack\"](https://img.shields.io/badge/join-us%20on%20slack-gray.svg?longCache=true&logo=slack&colorB=brightgreen)](https://coder.com/community) [![Twitter Follow](https://img.shields.io/twitter/follow/CoderHQ?label=%40CoderHQ&style=social)](https://twitter.com/coderhq) [![codecov](https://codecov.io/gh/coder/code-server/branch/main/graph/badge.svg?token=5iM9farjnC)](https://codecov.io/gh/coder/code-server) [![See latest](https://img.shields.io/static/v1?label=Docs&message=see%20latest&color=blue)](https://coder.com/docs/code-server/latest)\n\nRun [VS Code](https://github.com/Microsoft/vscode) on any machine anywhere and\naccess it in the browser.\n\n![Screenshot](./assets/screenshot-1.png)\n![Screenshot](./assets/screenshot-2.png)\n\n## Highlights\n\n- Code on any device with a consistent development environment\n- Use cloud servers to speed up tests, compilations, downloads, and more\n- Preserve battery life when you're on the go; all intensive tasks run on your\n  server\n\n## Requirements\n\nSee [requirements](https://coder.com/docs/code-server/latest/requirements) for minimum specs, as well as instructions\non how to set up a Google VM on which you can install code-server.\n\n**TL;DR:** Linux machine with WebSockets enabled, 1 GB RAM, and 2 vCPUs\n\n## Getting started\n\nThere are four ways to get started:\n\n1. Using the [install\n   script](https://github.com/coder/code-server/blob/main/install.sh), which\n   automates most of the process. The script uses the system package manager if\n   possible.\n2. Manually [installing\n   code-server](https://coder.com/docs/code-server/latest/install)\n3. Deploy code-server to your team with [coder/coder](https://cdr.co/coder-github)\n4. Using our one-click buttons and guides to [deploy code-server to a cloud\n   provider](https://github.com/coder/deploy-code-server) ⚡\n\nIf you use the install script, you can preview what occurs during the install\nprocess:\n\n```bash\ncurl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run\n```\n\nTo install, run:\n\n```bash\ncurl -fsSL https://code-server.dev/install.sh | sh\n```\n\nWhen done, the install script prints out instructions for running and starting\ncode-server.\n\n> **Note**\n> To manage code-server for a team on your infrastructure, see: [coder/coder](https://cdr.co/coder-github)\n\nWe also have an in-depth [setup and\nconfiguration](https://coder.com/docs/code-server/latest/guide) guide.\n\n## Questions?\n\nSee answers to [frequently asked\nquestions](https://coder.com/docs/code-server/latest/FAQ).\n\n## Want to help?\n\nSee [Contributing](https://coder.com/docs/code-server/latest/CONTRIBUTING) for\ndetails.\n\n## Hiring\n\nInterested in [working at Coder](https://coder.com/careers)? Check out [our open\npositions](https://coder.com/careers#openings)!\n\n## For Teams\n\nWe develop [coder/coder](https://cdr.co/coder-github) to help teams to\nadopt remote development.\n",
      "sha": "b56f267e4d3c3b1c22a80fde62152d86fa5350af",
      "size": 3061,
      "timestamp": "2025-01-26T13:44:23.175942"
    },
    {
      "path": "docs/SECURITY.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/SECURITY.md",
      "content": "# Security Policy\n\nCoder and the code-server team want to keep the code-server project secure and safe for end-users.\n\n## Tools\n\nWe use the following tools to help us stay on top of vulnerability mitigation.\n\n- [dependabot](https://dependabot.com/)\n  - Submits pull requests to upgrade dependencies. We use dependabot's version\n    upgrades as well as security updates.\n- code-scanning\n  - [CodeQL](https://securitylab.github.com/tools/codeql/)\n    - Semantic code analysis engine that runs on a regular schedule (see\n      `codeql-analysis.yml`)\n  - [trivy](https://github.com/aquasecurity/trivy)\n    - Comprehensive vulnerability scanner that runs on PRs into the default\n      branch and scans both our container image and repository code (see\n      `trivy-scan-repo` and `trivy-scan-image` jobs in `build.yaml`)\n- `npm audit`\n  - Audits NPM dependencies.\n\n## Supported Versions\n\nCoder sponsors the development and maintenance of the code-server project. We will fix security issues within 90 days of receiving a report and publish the fix in a subsequent release. The code-server project does not provide backports or patch releases for security issues at this time.\n\n| Version                                                 | Supported          |\n| ------------------------------------------------------- | ------------------ |\n| [Latest](https://github.com/coder/code-server/releases) | :white_check_mark: |\n\n## Reporting a Vulnerability\n\nTo report a vulnerability, please send an email to security[@]coder.com, and our security team will respond to you.\n",
      "sha": "9ff33e365c4b98865b18c15545f9b54fc30b1492",
      "size": 1562,
      "timestamp": "2025-01-26T13:44:24.205115"
    },
    {
      "path": "docs/android.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/android.md",
      "content": "# Running code-server using UserLAnd\n\n1. Install UserLAnd from [Google Play](https://play.google.com/store/apps/details?id=tech.ula&hl=en_US&gl=US)\n2. Install an Ubuntu VM\n3. Start app\n4. Install Node.js and `curl` using `sudo apt install nodejs npm curl -y`\n5. Install `nvm`:\n\n```shell\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n```\n\n6. Exit the terminal using `exit` and then reopen the terminal\n7. Install and use Node.js 20:\n\n```shell\nnvm install 18\nnvm use 18\n```\n\n8. Install code-server globally on device with: `npm install --global code-server`\n9. Run code-server with `code-server`\n10. Access on localhost:8080 in your browser\n\n# Running code-server using Nix-on-Droid\n\n1. Install Nix-on-Droid from [F-Droid](https://f-droid.org/packages/com.termux.nix/)\n2. Start app\n3. Spawn a shell with code-server by running `nix-shell -p code-server`\n4. Run code-server with `code-server`\n5. Access on localhost:8080 in your browser\n",
      "sha": "00909f9754155136db0b8bcb37fd5f30cfea7870",
      "size": 968,
      "timestamp": "2025-01-26T13:44:25.217526"
    },
    {
      "path": "docs/coder.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/coder.md",
      "content": "# Coder\n\nTo install and run code-server in a Coder workspace, we suggest using the `install.sh`\nscript in your template like so:\n\n```terraform\nresource \"coder_agent\" \"dev\" {\n  arch           = \"amd64\"\n  os             = \"linux\"\n  startup_script = <<EOF\n    #!/bin/sh\n    set -x\n    # install and start code-server\n    curl -fsSL https://code-server.dev/install.sh | sh -s -- --version 4.8.3\n    code-server --auth none --port 13337 &\n    EOF\n}\n\nresource \"coder_app\" \"code-server\" {\n  agent_id     = coder_agent.dev.id\n  slug         = \"code-server\"\n  display_name = \"code-server\"\n  url          = \"http://localhost:13337/\"\n  icon         = \"/icon/code.svg\"\n  subdomain    = false\n  share        = \"owner\"\n\n  healthcheck {\n    url       = \"http://localhost:13337/healthz\"\n    interval  = 3\n    threshold = 10\n  }\n}\n```\n\nOr use our official [`code-server`](https://registry.coder.com/modules/code-server) module from the Coder [module registry](htpps://registry.coder.com/modules):\n\n```terraform\nmodule \"code-server\" {\n  source     = \"registry.coder.com/modules/code-server/coder\"\n  version    = \"1.0.5\"\n  agent_id   = coder_agent.example.id\n  extensions = [\"dracula-theme.theme-dracula\", \"ms-azuretools.vscode-docker\"]\n}\n```\n\nIf you run into issues, ask for help on the `coder/coder` [Discussions\nhere](https://github.com/coder/coder/discussions).\n",
      "sha": "f62a3c2edcd806e43a1c4ebdc1ffcc7e6b385c74",
      "size": 1347,
      "timestamp": "2025-01-26T13:44:28.538545"
    },
    {
      "path": "docs/collaboration.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/collaboration.md",
      "content": "# Collaboration\n\nWith third-party extensions, you can use code-server to collaborate with other developers in real time.\n\n## Code sharing using Duckly\n\n[Duckly](https://duckly.com/) allows you to share your code in real-time even with people using different IDEs (like JetBrains and VSCode).\n\n- Cross-IDE support,\n- Real-time typing,\n- P2P encrypted,\n- Voice and audio chat,\n- Terminal sharing\n\n### Installing the Duckly Extension\n\nDuckly uses an extension to provide real time sharing features\n\n1. Install the Duckly extension from OpenVSX on `code-server`.\n\n```bash\nSERVICE_URL=https://open-vsx.org/vscode/gallery \\\n  ITEM_URL=https://open-vsx.org/vscode/item \\\n  code-server --install-extension gitduck.code-streaming\n```\n\n2. Refresh you `code-server` window. You should now be able to see the Duckly extension.\n\n### Sharing with Duckly\n\nAs `code-server` is based on VS Code, you can follow the steps described on Duckly's [Pair programming with VS Code](https://duckly.com/tools/vscode) page and skip the installation step.\n\n## Code sharing using CodeTogether\n\n[CodeTogether](https://www.codetogether.com/) is a real-time cross-IDE replacement for Microsoft Live Share providing:\n\n- Cross-IDE support - between VS Code, Eclipse, IntelliJ and IDEs based on them (browser or desktop)\n- Real-time editing - shared or individual cursors for pairing, mobbing, swarming, or whatever\n- P2P encrypted - servers can't decrypt the traffic ([Security Details](https://codetogether.com/download/security/))\n- SaaS or [On-premises](https://codetogether.com/on-premises/) options\n- Shared servers, terminals, and consoles\n- Unit Testing - with support for Red, Green, Refactor TDD\n- Joining via a web browser or your preferred IDE\n- Free unlimited 1 hour sessions with 4 participants\n- Multiple plans including [free or paid options](https://www.codetogether.com/pricing/)\n\n### Installing the CodeTogether extension\n\n1. Install the CodeTogether extension from OpenVSX on `code-server`.\n\n   ```sh\n   SERVICE_URL=https://open-vsx.org/vscode/gallery \\\n     ITEM_URL=https://open-vsx.org/vscode/item \\\n     code-server --install-extension genuitecllc.codetogether\n   ```\n\n2. CodeTogether requires VS Code's proposed API to run. Start code-server with the following flag:\n\n   ```sh\n   code-server --enable-proposed-api genuitecllc.codetogether\n   ```\n\n   Another option would be to add a value in code-server's [config file](https://coder.com/docs/code-server/latest/FAQ#how-does-the-config-file-work).\n\n3. Refresh code-server and navigate to the CodeTogether icon in the sidebar to host or join a coding session.\n",
      "sha": "bc2e20a7cdd32152aacdae59ba38e4f6801ad6dd",
      "size": 2599,
      "timestamp": "2025-01-26T13:44:29.642715"
    },
    {
      "path": "docs/guide.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/guide.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# Setup Guide\n\n- [Expose code-server](#expose-code-server)\n  - [Port forwarding via SSH](#port-forwarding-via-ssh)\n  - [Using Let's Encrypt with Caddy](#using-lets-encrypt-with-caddy)\n  - [Using Let's Encrypt with NGINX](#using-lets-encrypt-with-nginx)\n  - [Using a self-signed certificate](#using-a-self-signed-certificate)\n  - [TLS 1.3 and Safari](#tls-13-and-safari)\n- [External authentication](#external-authentication)\n- [HTTPS and self-signed certificates](#https-and-self-signed-certificates)\n- [Accessing web services](#accessing-web-services)\n  - [Using a subdomain](#using-a-subdomain)\n  - [Using a subpath](#using-a-subpath)\n  - [Using your own proxy](#using-your-own-proxy)\n  - [Stripping `/proxy/<port>` from the request path](#stripping-proxyport-from-the-request-path)\n  - [Proxying to create a React app](#proxying-to-create-a-react-app)\n  - [Proxying to a Vue app](#proxying-to-a-vue-app)\n  - [Proxying to an Angular app](#proxying-to-an-angular-app)\n  - [Proxying to a Svelte app](#proxying-to-a-svelte-app)\n  - [Prefixing `/absproxy/<port>` with a path](#prefixing-absproxyport-with-a-path)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\nThis article will walk you through exposing code-server securely once you've\ncompleted the [installation process](install.md).\n\n## Expose code-server\n\n**Never** expose code-server directly to the internet without some form of\nauthentication and encryption, otherwise someone can take over your machine via\nthe terminal.\n\nBy default, code-server uses password authentication. As such, you must copy the\npassword from code-server's config file to log in. To avoid exposing itself\nunnecessarily, code-server listens on `localhost`; this practice is fine for\ntesting, but it doesn't work if you want to access code-server from a different\nmachine.\n\n> **Rate limits:** code-server rate limits password authentication attempts to\n> two per minute plus an additional twelve per hour.\n\nThere are several approaches to operating and exposing code-server securely:\n\n- Port forwarding via SSH\n- Using Let's Encrypt with Caddy\n- Using Let's Encrypt with NGINX\n- Using a self-signed certificate\n\n### Port forwarding via SSH\n\nWe highly recommend using [port forwarding via\nSSH](https://help.ubuntu.com/community/SSH/OpenSSH/PortForwarding) to access\ncode-server. If you have an SSH server on your remote machine, this approach\ndoesn't require any additional setup at all.\n\nThe downside to SSH forwarding, however, is that you can't access code-server\nwhen using machines without SSH clients (such as iPads). If this applies to you,\nwe recommend using another method, such as [Let's Encrypt](#let-encrypt) instead.\n\n> To work properly, your environment should have WebSockets enabled, which\n> code-server uses to communicate between the browser and server.\n\n1. SSH into your instance and edit the code-server config file to disable\n   password authentication:\n\n   ```console\n   # Replaces \"auth: password\" with \"auth: none\" in the code-server config.\n   sed -i.bak 's/auth: password/auth: none/' ~/.config/code-server/config.yaml\n   ```\n\n2. Restart code-server:\n\n   ```console\n   sudo systemctl restart code-server@$USER\n   ```\n\n3. Forward local port `8080` to `127.0.0.1:8080` on the remote instance by running the following command on your local machine:\n\n   ```console\n   # -N disables executing a remote shell\n   ssh -N -L 8080:127.0.0.1:8080 [user]@<instance-ip>\n   ```\n\n4. At this point, you can access code-server by pointing your web browser to `http://127.0.0.1:8080`.\n\n5. If you'd like to make the port forwarding via SSH persistent, we recommend\n   using [mutagen](https://mutagen.io/documentation/introduction/installation)\n   to do so. Once you've installed mutagen, you can port forward as follows:\n\n   ```shell\n   # This is the same as the above SSH command, but it runs in the background\n   # continuously. Be sure to add `mutagen daemon start` to your ~/.bashrc to\n   # start the mutagen daemon when you open a shell.\n   mutagen forward create --name=code-server tcp:127.0.0.1:8080 < instance-ip > :tcp:127.0.0.1:8080\n   ```\n\n6. Optional, but highly recommended: add the following to `~/.ssh/config` so\n   that you can detect bricked SSH connections:\n\n   ```bash\n   Host *\n   ServerAliveInterval 5\n   ExitOnForwardFailure yes\n   ```\n\n> You can [forward your\n> SSH](https://developer.github.com/v3/guides/using-ssh-agent-forwarding/) and\n> [GPG agent](https://wiki.gnupg.org/AgentForwarding) to the instance to\n> securely access GitHub and sign commits without having to copy your keys.\n\n### Using Let's Encrypt with Caddy\n\nUsing [Let's Encrypt](https://letsencrypt.org) is an option if you want to\naccess code-server on an iPad or do not want to use SSH port forwarding.\n\n1. This option requires that the remote machine be exposed to the internet. Make sure that your instance allows HTTP/HTTPS traffic.\n\n1. You'll need a domain name (if you don't have one, you can purchase one from\n   [Google Domains](https://domains.google.com) or the domain service of your\n   choice)). Once you have a domain name, add an A record to your domain that contains your\n   instance's IP address.\n\n1. Install [Caddy](https://caddyserver.com/docs/download#debian-ubuntu-raspbian):\n\n```console\nsudo apt install -y debian-keyring debian-archive-keyring apt-transport-https\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install caddy\n```\n\n1. Replace `/etc/caddy/Caddyfile` using `sudo` so that the file looks like this:\n\n   ```text\n   mydomain.com {\n     reverse_proxy 127.0.0.1:8080\n   }\n   ```\n\n   If you want to serve code-server from a sub-path, you can do so as follows:\n\n   ```text\n   mydomain.com/code/* {\n     uri strip_prefix /code\n     reverse_proxy 127.0.0.1:8080\n   }\n   ```\n\n   Remember to replace `mydomain.com` with your domain name!\n\n1. Reload Caddy:\n\n   ```console\n   sudo systemctl reload caddy\n   ```\n\nAt this point, you should be able to access code-server via\n`https://mydomain.com`.\n\n### Using Let's Encrypt with NGINX\n\n1. This option requires that the remote machine be exposed to the internet. Make sure that your instance allows HTTP/HTTPS traffic.\n\n1. You'll need a domain name (if you don't have one, you can purchase one from\n   [Google Domains](https://domains.google.com) or the domain service of your\n   choice)). Once you have a domain name, add an A record to your domain that contains your\n   instance's IP address.\n\n1. Install NGINX:\n\n   ```bash\n   sudo apt update\n   sudo apt install -y nginx certbot python3-certbot-nginx\n   ```\n\n1. Update `/etc/nginx/sites-available/code-server` using sudo with the following\n   configuration:\n\n   ```text\n   server {\n       listen 80;\n       listen [::]:80;\n       server_name mydomain.com;\n\n       location / {\n         proxy_pass http://localhost:8080/;\n         proxy_set_header Host $http_host;\n         proxy_set_header Upgrade $http_upgrade;\n         proxy_set_header Connection upgrade;\n         proxy_set_header Accept-Encoding gzip;\n       }\n   }\n   ```\n\n   Be sure to replace `mydomain.com` with your domain name!\n\n1. Enable the config:\n\n   ```console\n   sudo ln -s ../sites-available/code-server /etc/nginx/sites-enabled/code-server\n   sudo certbot --non-interactive --redirect --agree-tos --nginx -d mydomain.com -m me@example.com\n   ```\n\n   Be sure to replace `me@example.com` with your actual email.\n\nAt this point, you should be able to access code-server via\n`https://mydomain.com`.\n\n### Using a self-signed certificate\n\n> Self signed certificates do not work with iPad; see [./ipad.md](./ipad.md) for\n> more information.\n\nBefore proceeding, we recommend familiarizing yourself with the [risks of\nself-signing a certificate for\nSSL](https://security.stackexchange.com/questions/8110).\n\nWe recommend self-signed certificates as a last resort, since self-signed\ncertificates do not work with iPads and may cause unexpected issues with\ncode-server. You should only proceed with this option if:\n\n- You do not want to buy a domain or you cannot expose the remote machine to\n  the internet\n- You do not want to use port forwarding via SSH\n\nTo use a self-signed certificate:\n\n1. This option requires that the remote machine be exposed to the internet. Make\n   sure that your instance allows HTTP/HTTPS traffic.\n\n1. SSH into your instance and edit your code-server config file to use a\n   randomly generated self-signed certificate:\n\n   ```console\n   # Replaces \"cert: false\" with \"cert: true\" in the code-server config.\n   sed -i.bak 's/cert: false/cert: true/' ~/.config/code-server/config.yaml\n   # Replaces \"bind-addr: 127.0.0.1:8080\" with \"bind-addr: 0.0.0.0:443\" in the code-server config.\n   sed -i.bak 's/bind-addr: 127.0.0.1:8080/bind-addr: 0.0.0.0:443/' ~/.config/code-server/config.yaml\n   # Allows code-server to listen on port 443.\n   sudo setcap cap_net_bind_service=+ep /usr/lib/code-server/lib/node\n   ```\n\n1. Restart code-server:\n\n   ```console\n   sudo systemctl restart code-server@$USER\n   ```\n\nAt this point, you should be able to access code-server via\n`https://<your-instance-ip>`.\n\nIf you'd like to avoid the warnings displayed by code-server when using a\nself-signed certificate, you can use [mkcert](https://mkcert.dev) to create a\nself-signed certificate that's trusted by your operating system, then pass the\ncertificate to code-server via the `cert` and `cert-key` config fields.\n\n### TLS 1.3 and Safari\n\nIf you will be using Safari and your configuration does not allow anything less\nthan TLS 1.3 you will need to add support for TLS 1.2 since Safari does not\nsupport TLS 1.3 for web sockets at the time of writing. If this is the case you\nshould see OSSStatus: 9836 in the browser console.\n\n## External authentication\n\nIf you want to use external authentication mechanism (e.g., Sign in with\nGoogle), you can do this with a reverse proxy such as:\n\n- [Pomerium](https://www.pomerium.io/guides/code-server.html)\n- [oauth2_proxy](https://github.com/pusher/oauth2_proxy)\n- [Cloudflare Access](https://teams.cloudflare.com/access)\n\n## HTTPS and self-signed certificates\n\nFor HTTPS, you can use a self-signed certificate by:\n\n- Passing in `--cert`\n- Passing in an existing certificate by providing the path to `--cert` and the\n  path to the key with `--cert-key`\n\nThe self signed certificate will be generated to\n`~/.local/share/code-server/self-signed.crt`.\n\nIf you pass a certificate to code-server, it will respond to HTTPS requests and\nredirect all HTTP requests to HTTPS.\n\n> You can use [Let's Encrypt](https://letsencrypt.org/) to get a TLS certificate\n> for free.\n\nNote: if you set `proxy_set_header Host $host;` in your reverse proxy config, it will change the address displayed in the green section of code-server in the bottom left to show the correct address.\n\n## Accessing web services\n\nIf you're working on web services and want to access them locally, code-server\ncan proxy to any port using either a subdomain or a subpath, allowing you to\nsecurely access these services using code-server's built-in authentication.\n\n### Using a subdomain\n\nYou will need a DNS entry that points to your server for each port you want to\naccess. You can either set up a wildcard DNS entry for `*.<domain>` if your\ndomain name registrar supports it, or you can create one for every port you want\nto access (`3000.<domain>`, `8080.<domain>`, etc).\n\nYou should also set up TLS certificates for these subdomains, either using a\nwildcard certificate for `*.<domain>` or individual certificates for each port.\n\nTo set your domain, start code-server with the `--proxy-domain` flag:\n\n```console\ncode-server --proxy-domain <domain>\n```\n\nFor instance, if you have code-server exposed on `domain.tld` and a Python\nserver running on port 8080 of the same machine code-server is running on, you\ncould run code-server with `--proxy-domain domain.tld` and access the Python\nserver via `8080.domain.tld`.\n\nNote that this uses the host header, so ensure your reverse proxy (if you're\nusing one) forwards that information.\n\n### Using a subpath\n\nSimply browse to `/proxy/<port>/`. For instance, if you have code-server\nexposed on `domain.tld` and a Python server running on port 8080 of the same\nmachine code-server is running on, you could access the Python server via\n`domain.tld/proxy/8000`.\n\n### Using your own proxy\n\nYou can make extensions and the ports panel use your own proxy by setting\n`VSCODE_PROXY_URI`. For example if you set\n`VSCODE_PROXY_URI=https://{{port}}.kyle.dev` when an application is detected\nrunning on port 3000 of the same machine code-server is running on the ports\npanel will create a link to https://3000.kyle.dev instead of pointing to the\nbuilt-in subpath-based proxy.\n\nNote: relative paths are also supported i.e.\n`VSCODE_PROXY_URI=./proxy/{{port}}`\n\n### Stripping `/proxy/<port>` from the request path\n\nYou may notice that the code-server proxy strips `/proxy/<port>` from the\nrequest path.\n\nHTTP servers should use relative URLs to avoid the need to be coupled to the\nabsolute path at which they are served. This means you must [use trailing\nslashes on all paths with\nsubpaths](https://blog.cdivilly.com/2019/02/28/uri-trailing-slashes).\n\nThis reasoning is why the default behavior is to strip `/proxy/<port>` from the\nbase path. If your application uses relative URLs and does not assume the\nabsolute path at which it is being served, it will just work no matter what port\nyou decide to serve it off or if you put it in behind code-server or any other\nproxy.\n\nHowever, some prefer the cleaner aesthetic of no trailing slashes. Omitting the\ntrailing slashes couples you to the base path, since you cannot use relative\nredirects correctly anymore. If you're okay with this tradeoff, use `/absproxy`\ninstead and the path will be passed as is (e.g., `/absproxy/3000/my-app-path`).\n\n### Proxying to create a React app\n\nYou must use `/absproxy/<port>` with `create-react-app` (see\n[#2565](https://github.com/coder/code-server/issues/2565) and\n[#2222](https://github.com/coder/code-server/issues/2222) for more information).\nYou will need to inform `create-react-app` of the path at which you are serving\nvia `$PUBLIC_URL` and webpack via `$WDS_SOCKET_PATH`:\n\n```sh\nPUBLIC_URL=/absproxy/3000 \\\n  WDS_SOCKET_PATH=$PUBLIC_URL/sockjs-node \\\n  BROWSER=none yarn start\n```\n\nYou should then be able to visit `https://my-code-server-address.io/absproxy/3000` to see your app exposed through\ncode-server!\n\n> We highly recommend using the subdomain approach instead to avoid this class of issue.\n\n### Proxying to a Vue app\n\nSimilar to the situation with React apps, you have to make a few modifications to proxy a Vue app.\n\n1. add `vue.config.js`\n2. update the values to match this (you can use any free port):\n\n```js\nmodule.exports = {\n  devServer: {\n    port: 3454,\n    sockPath: \"sockjs-node\",\n  },\n  publicPath: \"/absproxy/3454\",\n}\n```\n\n3. access app at `<code-server-root>/absproxy/3454` e.g. `http://localhost:8080/absproxy/3454`\n\nRead more about `publicPath` in the [Vue.js docs](https://cli.vuejs.org/config/#publicpath)\n\n### Proxying to an Angular app\n\nIn order to use code-server's built-in proxy with Angular, you need to make the following changes in your app:\n\n1. use `<base href=\"./.\">` in `src/index.html`\n2. add `--serve-path /absproxy/4200` to `ng serve` in your `package.json`\n\nFor additional context, see [this GitHub Discussion](https://github.com/coder/code-server/discussions/5439#discussioncomment-3371983).\n\n### Proxying to a Svelte app\n\nIn order to use code-server's built-in proxy with Svelte, you need to make the following changes in your app:\n\n1. Add `svelte.config.js` if you don't already have one\n2. Update the values to match this (you can use any free port):\n\n```js\nconst config = {\n  kit: {\n    paths: {\n      base: \"/absproxy/5173\",\n    },\n  },\n}\n```\n\n3. Access app at `<code-server-root>/absproxy/5173/` e.g. `http://localhost:8080/absproxy/5173/\n\nFor additional context, see [this Github Issue](https://github.com/sveltejs/kit/issues/2958)\n\n### Prefixing `/absproxy/<port>` with a path\n\nThis is a case where you need to serve an application via `absproxy` as explained above while serving `codeserver` itself from a path other than the root in your domain.\n\nFor example: `http://my-code-server.com/user/123/workspace/my-app`. To achieve this result:\n\n1. Start code server with the switch `--abs-proxy-base-path=/user/123/workspace`\n2. Follow one of the instructions above for your framework.\n",
      "sha": "60098ca7e679a139c0d6c3964b3f53a17baf1f61",
      "size": 16860,
      "timestamp": "2025-01-26T13:44:30.647992"
    },
    {
      "path": "docs/helm.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/helm.md",
      "content": "# code-server Helm Chart\n\n[![Version: 1.0.0](https://img.shields.io/badge/Version-1.0.0-informational?style=flat-square)](https://img.shields.io/badge/Version-1.0.0-informational?style=flat-square) [![Type: application](https://img.shields.io/badge/Type-application-informational?style=flat-square)](https://img.shields.io/badge/Type-application-informational?style=flat-square) [![AppVersion: 4.8.0](https://img.shields.io/badge/AppVersion-4.8.0-informational?style=flat-square)](https://img.shields.io/badge/AppVersion-4.8.0-informational?style=flat-square)\n\n[code-server](https://github.com/coder/code-server) code-server is VS Code running\non a remote server, accessible through the browser.\n\nThis chart is community maintained by [@Matthew-Beckett](https://github.com/Matthew-Beckett) and [@alexgorbatchev](https://github.com/alexgorbatchev)\n\n## Quickstart\n\n```console\n$ git clone https://github.com/coder/code-server\n$ cd code-server\n$ helm upgrade --install code-server ci/helm-chart\n```\n\n## Introduction\n\nThis chart bootstraps a code-server deployment on a\n[Kubernetes](http://kubernetes.io) cluster using the [Helm](https://helm.sh)\npackage manager.\n\n## Prerequisites\n\n- Kubernetes 1.6+\n\n## Installing the Chart\n\nTo install the chart with the release name `code-server`:\n\n```console\n$ git clone https://github.com/coder/code-server\n$ cd code-server\n$ helm upgrade --install code-server ci/helm-chart\n```\n\nThe command deploys code-server on the Kubernetes cluster in the default\nconfiguration. The [configuration](#configuration) section lists the parameters\nthat can be configured during installation.\n\n> **Tip**: List all releases using `helm list`\n\n## Uninstalling the Chart\n\nTo uninstall/delete the `code-server` deployment:\n\n```console\n$ helm delete code-server\n```\n\nThe command removes all the Kubernetes components associated with the chart and\ndeletes the release.\n\n## Configuration\n\nThe following table lists the configurable parameters of the code-server chart\nand their default values.\n\n## Values\n\n| Key                                         | Type   | Default                  |\n| ------------------------------------------- | ------ | ------------------------ |\n| affinity                                    | object | `{}`                     |\n| extraArgs                                   | list   | `[]`                     |\n| extraConfigmapMounts                        | list   | `[]`                     |\n| extraContainers                             | string | `\"\"`                     |\n| extraInitContainers                         | string | `\"\"`                     |\n| extraSecretMounts                           | list   | `[]`                     |\n| extraVars                                   | list   | `[]`                     |\n| extraVolumeMounts                           | list   | `[]`                     |\n| fullnameOverride                            | string | `\"\"`                     |\n| hostnameOverride                            | string | `\"\"`                     |\n| image.pullPolicy                            | string | `\"Always\"`               |\n| image.repository                            | string | `\"codercom/code-server\"` |\n| image.tag                                   | string | `\"4.8.0\"`                |\n| imagePullSecrets                            | list   | `[]`                     |\n| ingress.enabled                             | bool   | `false`                  |\n| nameOverride                                | string | `\"\"`                     |\n| nodeSelector                                | object | `{}`                     |\n| persistence.accessMode                      | string | `\"ReadWriteOnce\"`        |\n| persistence.annotations                     | object | `{}`                     |\n| persistence.enabled                         | bool   | `true`                   |\n| persistence.size                            | string | `\"1Gi\"`                  |\n| podAnnotations                              | object | `{}`                     |\n| podSecurityContext                          | object | `{}`                     |\n| replicaCount                                | int    | `1`                      |\n| resources                                   | object | `{}`                     |\n| securityContext.enabled                     | bool   | `true`                   |\n| securityContext.fsGroup                     | int    | `1000`                   |\n| securityContext.runAsUser                   | int    | `1000`                   |\n| service.port                                | int    | `8443`                   |\n| service.type                                | string | `\"ClusterIP\"`            |\n| serviceAccount.create                       | bool   | `true`                   |\n| serviceAccount.name                         | string | `nil`                    |\n| tolerations                                 | list   | `[]`                     |\n| volumePermissions.enabled                   | bool   | `true`                   |\n| volumePermissions.securityContext.runAsUser | int    | `0`                      |\n\nSpecify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,\n\n```console\n$ helm upgrade --install code-server \\\n  ci/helm-chart \\\n  --set persistence.enabled=false\n```\n\nThe above command sets the the persistence storage to false.\n\nAlternatively, a YAML file that specifies the values for the above parameters\ncan be provided while installing the chart. For example,\n\n```console\n$ helm upgrade --install code-server ci/helm-chart -f values.yaml\n```\n\n> **Tip**: You can use the default [values.yaml](values.yaml)\n\n# Extra Containers\n\nThere are two parameters which allow to add more containers to pod.\nUse `extraContainers` to add regular containers\nand `extraInitContainers` to add init containers. You can read more\nabout init containers in [k8s documentation](https://kubernetes.io/docs/concepts/workloads/pods/init-containers/).\n\nBoth parameters accept strings and use them as a templates\n\nExample of using `extraInitContainers`:\n\n```yaml\nextraInitContainers: |\n  - name: customization\n    image: {{ .Values.image.repository }}:{{ .Values.image.tag }}\n    imagePullPolicy: IfNotPresent\n    env:\n      - name: SERVICE_URL\n        value: https://open-vsx.org/vscode/gallery\n      - name: ITEM_URL\n        value: https://open-vsx.org/vscode/item\n    command:\n      - sh\n      - -c\n      - |\n        code-server --install-extension ms-python.python\n        code-server --install-extension golang.Go\n    volumeMounts:\n      - name: data\n        mountPath: /home/coder\n```\n\nWith this yaml in file `init.yaml`, you can execute\n\n```console\n$ helm upgrade --install code-server \\\n  ci/helm-chart \\\n  --values init.yaml\n```\n\nto deploy code-server with python and golang extensions preinstalled\nbefore main container have started.\n",
      "sha": "cf33d82892cf2d8e8456a50106276018ed6967ac",
      "size": 6891,
      "timestamp": "2025-01-26T13:44:31.630511"
    },
    {
      "path": "docs/install.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/install.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# Install\n\n- [install.sh](#installsh)\n  - [Detection reference](#detection-reference)\n- [npm](#npm)\n- [Standalone releases](#standalone-releases)\n- [Debian, Ubuntu](#debian-ubuntu)\n- [Fedora, CentOS, RHEL, SUSE](#fedora-centos-rhel-suse)\n- [Arch Linux](#arch-linux)\n- [Artix Linux](#artix-linux)\n- [macOS](#macos)\n- [Docker](#docker)\n- [Helm](#helm)\n- [Windows](#windows)\n- [Raspberry Pi](#raspberry-pi)\n- [Termux](#termux)\n- [Cloud providers](#cloud-providers)\n- [Uninstall](#uninstall)\n  - [install.sh](#installsh-1)\n  - [Homebrew](#homebrew)\n  - [npm](#npm-1)\n  - [Debian, Ubuntu](#debian-ubuntu-1)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\nThis document demonstrates how to install `code-server` on various distros and\noperating systems.\n\n## install.sh\n\nThe easiest way to install code-server is to use our [install\nscript](https://github.com/coder/code-server/blob/main/install.sh) for Linux, macOS and FreeBSD. The install script\n[attempts to use the system package manager](#detection-reference) if possible.\n\nYou can preview what occurs during the install process:\n\n```bash\ncurl -fsSL https://code-server.dev/install.sh | sh -s -- --dry-run\n```\n\nTo install, run:\n\n```bash\ncurl -fsSL https://code-server.dev/install.sh | sh\n```\n\nYou can modify the installation process by including one or more of the\nfollowing flags:\n\n- `--dry-run`: echo the commands for the install process without running them.\n- `--method`: choose the installation method.\n  - `--method=detect`: detect the package manager but fallback to\n    `--method=standalone`.\n  - `--method=standalone`: install a standalone release archive into `~/.local`.\n- `--prefix=/usr/local`: install a standalone release archive system-wide.\n- `--version=X.X.X`: install version `X.X.X` instead of latest version.\n- `--help`: see usage docs.\n- `--edge`: install the latest edge version (i.e. pre-release)\n\nWhen done, the install script prints out instructions for running and starting\ncode-server.\n\n> If you're concerned about the install script's use of `curl | sh` and the\n> security implications, please see [this blog\n> post](https://sandstorm.io/news/2015-09-24-is-curl-bash-insecure-pgp-verified-install)\n> by [sandstorm.io](https://sandstorm.io).\n\nIf you prefer to install code-server manually, despite the [detection\nreferences](#detection-reference) and `--dry-run` feature, then continue on for\ninformation on how to do this. The [`install.sh`](https://github.com/coder/code-server/blob/main/install.sh) script runs the\n_exact_ same commands presented in the rest of this document.\n\n### Detection reference\n\n- For Debian and Ubuntu, code-server will install the latest deb package.\n- For Fedora, CentOS, RHEL and openSUSE, code-server will install the latest RPM\n  package.\n- For Arch Linux, code-server will install the AUR package.\n- For any unrecognized Linux operating system, code-server will install the\n  latest standalone release into `~/.local`.\n\n  - Ensure that you add `~/.local/bin` to your `$PATH` to run code-server.\n\n- For macOS, code-server will install the Homebrew package (if you don't have\n  Homebrew installed, code-server will install the latest standalone release\n  into `~/.local`).\n\n  - Ensure that you add `~/.local/bin` to your `$PATH` to run code-server.\n\n- For FreeBSD, code-server will install the [npm package](#npm) with `npm`\n\n- If you're installing code-server onto architecture with no releases,\n  code-server will install the [npm package](#npm) with `npm`\n  - We currently offer releases for amd64 and arm64.\n  - The [npm package](#npm) builds the native modules on post-install.\n\n## npm\n\nWe recommend installing with `npm` when:\n\n1. You aren't using a machine with `amd64` or `arm64`.\n2. You are installing code-server on Windows.\n3. You're on Linux with `glibc` < v2.28 or `glibcxx` < v3.4.21.\n4. You're running Alpine Linux or are using a non-glibc libc. See\n   [#1430](https://github.com/coder/code-server/issues/1430#issuecomment-629883198)\n   for more information.\n\nInstalling code-server with `npm` builds native modules on install.\n\nThis process requires C dependencies; see our guide on [installing with npm](./npm.md) for more information.\n\n## Standalone releases\n\nWe publish self-contained `.tar.gz` archives for every release on\n[GitHub](https://github.com/coder/code-server/releases). The archives bundle the\nnode binary and node modules.\n\nWe create the standalone releases using the [npm package](#npm), and we\nthen create the remaining releases using the standalone version.\n\nThe only requirement to use the standalone release is `glibc` >= 2.28 and\n`glibcxx` >= v3.4.21 on Linux (for macOS, there is no minimum system\nrequirement).\n\nTo use a standalone release:\n\n1. Download the latest release archive for your system from\n   [GitHub](https://github.com/coder/code-server/releases).\n2. Unpack the release.\n3. Run code-server by executing `./bin/code-server`.\n\nYou can add `./bin/code-server` to your `$PATH` so that you can execute\n`code-server` without providing full path each time.\n\nHere is a sample script for installing and using a standalone code-server\nrelease on Linux:\n\n```bash\nmkdir -p ~/.local/lib ~/.local/bin\ncurl -fL https://github.com/coder/code-server/releases/download/v$VERSION/code-server-$VERSION-linux-amd64.tar.gz \\\n  | tar -C ~/.local/lib -xz\nmv ~/.local/lib/code-server-$VERSION-linux-amd64 ~/.local/lib/code-server-$VERSION\nln -s ~/.local/lib/code-server-$VERSION/bin/code-server ~/.local/bin/code-server\nPATH=\"~/.local/bin:$PATH\"\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\n## Debian, Ubuntu\n\n> The standalone arm64 .deb does not support Ubuntu 16.04 or earlier. Please\n> upgrade or [build with npm](#npm).\n\n```bash\ncurl -fOL https://github.com/coder/code-server/releases/download/v$VERSION/code-server_${VERSION}_amd64.deb\nsudo dpkg -i code-server_${VERSION}_amd64.deb\nsudo systemctl enable --now code-server@$USER\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\n## Fedora, CentOS, RHEL, SUSE\n\n> The standalone arm64 .rpm does not support CentOS 7. Please upgrade or [build\n> with npm](#npm).\n\n```bash\ncurl -fOL https://github.com/coder/code-server/releases/download/v$VERSION/code-server-$VERSION-amd64.rpm\nsudo rpm -i code-server-$VERSION-amd64.rpm\nsudo systemctl enable --now code-server@$USER\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\n## Arch Linux\n\n```bash\n# Install code-server from the AUR using yay.\nyay -S code-server\nsudo systemctl enable --now code-server@$USER\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\n```bash\n# Install code-server from the AUR with plain makepkg.\ngit clone https://aur.archlinux.org/code-server.git\ncd code-server\nmakepkg -si\nsudo systemctl enable --now code-server@$USER\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\n## Artix Linux\n\n```bash\n# Install code-server from the AUR\ngit clone https://aur.archlinux.org/code-server.git\ncd code-server\nmakepkg -si\n```\n\nSave the file as `code-server` in `/etc/init.d/` and make it executable with `chmod +x code-server`. Put your username in line 3.\n\n```bash\n#!/sbin/openrc-run\nname=$RC_SVCNAME\ndescription=\"$name - VS Code on a remote server\"\nuser=\"\" # your username here\nhomedir=\"/home/$user\"\ncommand=\"$(which code-server)\"\n# Just because you can do this does not mean you should. Use ~/.config/code-server/config.yaml instead\n#command_args=\"--extensions-dir $homedir/.local/share/$name/extensions --user-data-dir $homedir/.local/share/$name --disable-telemetry\"\ncommand_user=\"$user:$user\"\npidfile=\"/run/$name/$name.pid\"\ncommand_background=\"yes\"\nextra_commands=\"report\"\n\ndepend() {\n  use logger dns\n  need net\n}\n\nstart_pre() {\n  checkpath --directory --owner $command_user --mode 0755 /run/$name /var/log/$name\n}\n\nstart() {\n  default_start\n  report\n}\n\nstop() {\n  default_stop\n}\n\nstatus() {\n  default_status\n  report\n}\n\nreport() {\n  # Report to the user\n  einfo \"Reading configuration from ~/.config/code-server/config.yaml\"\n}\n```\n\nStart on boot with default runlevel\n\n```\nrc-update add code-server default\n```\n\nStart the service immediately\n\n```\nrc-service code-server start\n```\n\n## macOS\n\n```bash\nbrew install code-server\nbrew services start code-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\n## Docker\n\n```bash\n# This will start a code-server container and expose it at http://127.0.0.1:8080.\n# It will also mount your current directory into the container as `/home/coder/project`\n# and forward your UID/GID so that all file system operations occur as your user outside\n# the container.\n#\n# Your $HOME/.config is mounted at $HOME/.config within the container to ensure you can\n# easily access/modify your code-server config in $HOME/.config/code-server/config.json\n# outside the container.\nmkdir -p ~/.config\ndocker run -it --name code-server -p 127.0.0.1:8080:8080 \\\n  -v \"$HOME/.local:/home/coder/.local\" \\\n  -v \"$HOME/.config:/home/coder/.config\" \\\n  -v \"$PWD:/home/coder/project\" \\\n  -u \"$(id -u):$(id -g)\" \\\n  -e \"DOCKER_USER=$USER\" \\\n  codercom/code-server:latest\n```\n\nOur official image supports `amd64` and `arm64`. For `arm32` support, you can\nuse a [community-maintained code-server\nalternative](https://hub.docker.com/r/linuxserver/code-server).\n\n## Helm\n\nYou can install code-server using the [Helm package manager](https://coder.com/docs/code-server/latest/helm).\n\n## Windows\n\nWe currently [do not publish Windows\nreleases](https://github.com/coder/code-server/issues/1397). We recommend\ninstalling code-server onto Windows with [`npm`](#npm).\n\n## Raspberry Pi\n\nWe recommend installing code-server onto Raspberry Pi with [`npm`](#npm).\n\nIf you see an error related to `node-gyp` during installation, See [#5174](https://github.com/coder/code-server/issues/5174) for more information.\n\n## Termux\n\nPlease see code-server's [Termux docs](./termux.md#installation) for more\ninformation.\n\n## Cloud providers\n\nWe maintain [one-click apps and install scripts for cloud\nproviders](https://github.com/coder/deploy-code-server) such as DigitalOcean,\nRailway, Heroku, and Azure.\n\n## Uninstall\n\ncode-server can be completely uninstalled by removing the application directory, and your user configuration directory.\n\nTo delete settings and data:\n\n```shell\nrm -rf ~/.local/share/code-server ~/.config/code-server\n```\n\n### install.sh\n\nIf you installed with the install script, by default code-server will be in `~/.local/lib/code-server-<version>` and you can remove it with `rm -rf`. e.g.\n\n```shell\nrm -rf ~/.local/lib/code-server-*\n```\n\n### Homebrew\n\nTo remove the code-server homebrew package, run:\n\n```shell\nbrew remove code-server\n\n# Alternatively\nbrew uninstall code-server\n```\n\n### npm\n\nTo remove the code-server global module, run:\n\n```shell\nnpm uninstall --global code-server\n```\n\n### Debian, Ubuntu\n\nTo uninstall, run:\n\n```shell\nsudo apt remove code-server\n```\n",
      "sha": "e2dd905f9401dfd7ff590b63e448b5a79c433547",
      "size": 11256,
      "timestamp": "2025-01-26T13:44:32.615302"
    },
    {
      "path": "docs/ios.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/ios.md",
      "content": "# Using code-server on iOS with iSH\n\n1. Install iSH from the [App Store](https://apps.apple.com/us/app/ish-shell/id1436902243)\n2. Install `curl` and `nano` with `apk add curl nano`\n3. Configure iSH to use an earlier version of NodeJS with `nano /etc/apk/repositories` and edit `v3.14` to `v3.12` on both repository links.\n4. Install `nodejs` and `npm` with `apk add nodejs npm`\n5. Install code-server with `curl -fsSL https://code-server.dev/install.sh | sh`\n6. Run code-server with `code-server`\n7. Access on localhost:8080 in your browser\n",
      "sha": "fc484e19b0ddf7510b74ca7837d801527257e6da",
      "size": 541,
      "timestamp": "2025-01-26T13:44:33.713317"
    },
    {
      "path": "docs/ipad.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/ipad.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# iPad\n\n- [Using the code-server progressive web app (PWA)](#using-the-code-server-progressive-web-app-pwa)\n- [Access code-server using Servediter](#access-code-server-using-servediter)\n- [Raspberry Pi USB-C network](#raspberry-pi-usb-c-network)\n- [Recommendations](#recommendations)\n- [Known issues](#known-issues)\n  - [Workaround for issue with `ctrl+c` not stopping a running process in the terminal](#workaround-for-issue-with-ctrlc-not-stopping-a-running-process-in-the-terminal)\n- [Access code-server with a self-signed certificate on an iPad](#access-code-server-with-a-self-signed-certificate-on-an-ipad)\n  - [Certificate requirements](#certificate-requirements)\n  - [Sharing a self-signed certificate with an iPad](#sharing-a-self-signed-certificate-with-an-ipad)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\nOnce you've installed code-server, you can access it from an iPad.\n\n## Using the code-server progressive web app (PWA)\n\nTo use code-server on an iPad, we recommend installing the code-server\nprogressive web app (PWA):\n\n1. Open code-server in Safari.\n2. Click the **Share** icon.\n3. Click **Add to Home Screen**.\n\nYou can now open code-server from the Home screen, and when you do, you'll be\nusing the PWA. Running code-server as a PWA gets you more screen real estate and\naccess to top-level keyboard shortcuts since its running like a native app.\n\nFor example, you can use `cmd+w` to close an active file in the workbench. You\ncan add this to `keybindings.json`:\n\n1. Open code-server\n2. Go to **Command Palette** > **Open Keyboard Shortcuts (JSON)**\n3. Add the following to `keybindings.json`\n\n   ```json\n   {\n     \"key\": \"cmd+w\",\n     \"command\": \"workbench.action.closeActiveEditor\"\n   }\n   ```\n\n4. Test the command by using `cmd+w` to close an active file.\n\n## Access code-server using Servediter\n\nIf you are unable to get the self-signed certificate working, or you do not have a domain\nname to use, you can use [Servediter for code-server](https://apps.apple.com/us/app/servediter-for-code-server/id1504491325).\n\n> Servediter for code-server is **not** officially supported by the code-server team!\n\nTo use Servediter:\n\n1. Download the app from the App Store.\n2. When prompted, provide your server information. If you are running a local\n   server or a [Raspberry Pi connected via USB-C](#raspberry-pi-usb-c-network), you will input your settings\n   into **Self Hosted Server**.\n\n## Raspberry Pi USB-C network\n\nWe've heard of users having great success using code-server on an iPad connected\nto a Raspberry Pi via USB-C (the Raspberry Pi provides both power and direct\nnetwork access). Setting this up requires you to turn on **Network over USB-C**\non the Raspberry Pi, then continuing with code-server as usual on the iPad.\n\nFor more information, see:\n\n- [General introduction to Pi as an iPad\n  accessory](https://www.youtube.com/watch?v=IR6sDcKo3V8)\n- [iPad with Pi FAQ](https://www.youtube.com/watch?v=SPSlyqo5Q2Q)\n- [Technical guide to connecting a Raspberry Pi to an\n  iPad](https://www.geeky-gadgets.com/connect-a-raspberry-pi-4-to-an-ipad-pro-21-01-2020/)\n\nYou may also find the following tips from [Acker\nApple](http://github.com/ackerapple/) helpful:\n\n> Here are my keys to success. I bought a 4\" touch screen with fan included that\n> attaches as a case to the Pi. I use the touch screen for anytime I have\n> connection issues, otherwise I turn off the Pi screen. I gave my Pi a network\n> name so I can easily connect at home on wifi or when on go with 1 usb-c cable\n> that supplys both power and network connectivity. Lastly, not all usb-c cables\n> are equal and not all will work so try different usb-c cables if you are going\n> mad (confirm over wifi first then move to cable).\n\n## Recommendations\n\nOnce you can access code-server on your iPad, you may find the following tips\nand tricks helpful:\n\n- Use multi-task mode to make code changes and see the browser at the same time\n  - This prevents the iOS background from dropping an app's state if you are\n    switching between code-server and browser (with both in full-screen)\n- Be sure you are using the debug/terminal that is built into VS Code so that\n  you don’t need another terminal app running\n  - This also prevents switching between full screen apps and losing your view\n    due to iOS' background app memory management\n\n## Known issues\n\n- Getting self-signed certificates to work [is an involved\n  process](#access-code-server-with-a-self-signed-certificate-on-an-ipad)\n- Keyboard issues:\n  - The keyboard disappear sometimes\n    [#979](https://github.com/coder/code-server/issues/979)\n  - Some expectations regarding shortcuts may not be met:\n    - `cmd + n` opens new browser window instead of new file, and it's difficult\n      to set alternative as a workaround\n    - In general, expect to edit your keyboard shortcuts\n  - There's no escape key by default on the Magic Keyboard, so most users set\n    the globe key to be an escape key\n- Trackpad scrolling does not work on iPadOS < 14.5\n  ([#1455](https://github.com/coder/code-server/issues/1455))\n  - [WebKit fix](https://bugs.webkit.org/show_bug.cgi?id=210071#c13)\n- Keyboard may lose focus in Safari / split view [#4182](https://github.com/coder/code-server/issues/4182)\n- Terminal text does not appear by default [#3824](https://github.com/coder/code-server/issues/3824)\n- Copy & paste in terminal does not work well with keyboard shortcuts [#3491](https://github.com/coder/code-server/issues/3491)\n- `ctrl+c` does not stop a long-running process in the browser\n  - Tracking upstream issue here:\n    [#114009](https://github.com/microsoft/vscode/issues/114009)\n  - See [workaround](#ctrl-c-workaround)\n\nAdditionally, see [issues in the code-server repo that are tagged with the `os-ios`\nlabel](https://github.com/coder/code-server/issues?q=is%3Aopen+is%3Aissue+label%3Aos-ios)\nfor more information.\n\n### Workaround for issue with `ctrl+c` not stopping a running process in the terminal\n\nThis's currently an issue with `ctrl+c` not stopping a running process in the\nintegrated terminal. We have filed an issue upstream and are tracking\n[here](https://github.com/microsoft/vscode/issues/114009).\n\nIn the meantime, you can manually define a shortcut as a workaround:\n\n1. Open the Command Palette\n2. Look for **Preferences: Open Keyboard Shortcuts (JSON)**\n3. Add the following snippet:\n\n   ```json\n   {\n     \"key\": \"ctrl+c\",\n     \"command\": \"workbench.action.terminal.sendSequence\",\n     \"args\": {\n       \"text\": \"\\u0003\"\n     },\n     \"when\": \"terminalFocus\"\n   }\n   ```\n\n_Source: [StackOverflow](https://stackoverflow.com/a/52735954/3015595)_\n\n## Access code-server with a self-signed certificate on an iPad\n\nIf you've installed code-server and are [running it with a self-signed\ncertificate](./guide.md#using-a-self-signed-certificate), you may see multiple\nsecurity warnings from Safari. To fix this, you'll need to install the\nself-signed certificate generated by code-server as a profile on your device (you'll also need to do this to\nenable WebSocket connections).\n\n### Certificate requirements\n\n- We're assuming that you're using the self-signed certificate code-server\n  generates for you (if not, make sure that your certificate [abides by the\n  guidelines issued by Apple](https://support.apple.com/en-us/HT210176)).\n- We've noticed that the certificate has to include `basicConstraints=CA:true`.\n- Your certificate must have a subject alt name that matches the hostname you'll\n  use to access code-server from the iPad. You can pass this name to code-server\n  so that it generates the certificate correctly using `--cert-host`.\n\n### Sharing a self-signed certificate with an iPad\n\nTo share a self-signed certificate with an iPad:\n\n1. Get the location of the certificate code-server generated; code-server prints\n   the certificate's location in its logs:\n\n   ```console\n   [2020-10-30T08:55:45.139Z] info - Using generated certificate and key for HTTPS: ~/.local/share/code-server/mymbp_local.crt\n   ```\n\n2. Send the certificate to the iPad, either by emailing it to yourself or using\n   Apple's Airdrop feature.\n\n3. Open the `*.crt` file so that you're prompted to go into Settings to install.\n\n4. Go to **Settings** > **General** > **Profile**, and select the profile. Tap **Install**.\n\n5. Go to **Settings** > **About** > **Certificate Trust Settings** and [enable\n   full trust for your certificate](https://support.apple.com/en-us/HT204477).\n\nYou should be able to access code-server without all of Safari's warnings now.\n\n**warning**: Your iPad must access code-server via a domain name. It could be local\nDNS like `mymacbookpro.local`, but it must be a domain name. Otherwise, Safari will\nnot allow WebSockets connections.\n",
      "sha": "ef951cc4e6fea2c7e1e4922cd9c10fc8883e24ac",
      "size": 8941,
      "timestamp": "2025-01-26T13:44:34.736949"
    },
    {
      "path": "docs/npm.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/npm.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# npm Install Requirements\n\n- [Node.js version](#nodejs-version)\n- [Ubuntu, Debian](#ubuntu-debian)\n- [Fedora, CentOS, RHEL](#fedora-centos-rhel)\n- [Alpine](#alpine)\n- [macOS](#macos)\n- [FreeBSD](#freebsd)\n- [Windows](#windows)\n- [Installing](#installing)\n- [Troubleshooting](#troubleshooting)\n  - [Issues with Node.js after version upgrades](#issues-with-nodejs-after-version-upgrades)\n  - [Debugging install issues with npm](#debugging-install-issues-with-npm)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\nIf you're installing code-server via `npm`, you'll need to install additional\ndependencies required to build the native modules used by VS Code. This article\nincludes installing instructions based on your operating system.\n\n> **WARNING**: Do not use `yarn` to install code-server. Unlike `npm`, it does not respect\n> lockfiles for distributed applications. It will instead use the latest version\n> available at installation time - which might not be the one used for a given\n> code-server release, and [might lead to unexpected behavior](https://github.com/coder/code-server/issues/4927).\n\n## Node.js version\n\nWe use the same major version of Node.js shipped with Code's remote, which is\ncurrently `20.x`. VS Code also [lists Node.js\nrequirements](https://github.com/microsoft/vscode/wiki/How-to-Contribute#prerequisites).\n\nUsing other versions of Node.js [may lead to unexpected\nbehavior](https://github.com/coder/code-server/issues/1633).\n\n## Ubuntu, Debian\n\n```bash\nsudo apt-get install -y \\\n  build-essential \\\n  pkg-config \\\n  python3\nnpm config set python python3\n```\n\nProceed to [installing](#installing)\n\n## Fedora, CentOS, RHEL\n\n```bash\nsudo yum groupinstall -y 'Development Tools'\nsudo yum config-manager --set-enabled PowerTools # unnecessary on CentOS 7\nsudo yum install -y python2\nnpm config set python python2\n```\n\nProceed to [installing](#installing)\n\n## Alpine\n\n```bash\napk add alpine-sdk bash libstdc++ libc6-compat python3 krb5-dev\n```\n\nProceed to [installing](#installing)\n\n## macOS\n\n```bash\nxcode-select --install\n```\n\nProceed to [installing](#installing)\n\n## FreeBSD\n\n```sh\npkg install -y git python npm-node20 pkgconf\npkg install -y libinotify\n```\n\nProceed to [installing](#installing)\n\n## Windows\n\nInstalling code-server requires all of the [prerequisites for VS Code development](https://github.com/Microsoft/vscode/wiki/How-to-Contribute#prerequisites). When installing the C++ compiler tool chain, we recommend using \"Option 2: Visual Studio 2019\" for best results.\n\nNext, install code-server with:\n\n```bash\nnpm install --global code-server\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\nA `postinstall.sh` script will attempt to run. Select your terminal (e.g., Git bash) as the default shell for npm run-scripts. If an additional dialog does not appear, run the install command again.\n\nIf the `code-server` command is not found, you'll need to [add a directory to your PATH](https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/). To find the directory, use the following command:\n\n```shell\nnpm config get prefix\n```\n\nFor help and additional troubleshooting, see [#1397](https://github.com/coder/code-server/issues/1397).\n\n## Installing\n\nAfter adding the dependencies for your OS, install the code-server package globally:\n\n```bash\nnpm install --global code-server\ncode-server\n# Now visit http://127.0.0.1:8080. Your password is in ~/.config/code-server/config.yaml\n```\n\n## Troubleshooting\n\nIf you need further assistance, post on our [GitHub Discussions\npage](https://github.com/coder/code-server/discussions).\n\n### Issues with Node.js after version upgrades\n\nOccasionally, you may run into issues with Node.js.\n\nIf you install code-server using `npm`, and you upgrade your Node.js\nversion, you may need to reinstall code-server to recompile native modules.\nSometimes, you can get around this by navigating into code-server's `lib/vscode`\ndirectory and running `npm rebuild` to recompile the modules.\n\nA step-by-step example of how you might do this is:\n\n1. Install code-server: `brew install code-server`\n2. Navigate into the directory: `cd /usr/local/Cellar/code-server/<version>/libexec/lib/vscode/`\n3. Recompile the native modules: `npm rebuild`\n4. Restart code-server\n\n### Debugging install issues with npm\n\nTo debug installation issues, install with `npm`:\n\n```shell\n# Uninstall\nnpm uninstall --global code-server > /dev/null 2>&1\n\n# Install with logging\nnpm install --loglevel verbose --global code-server\n```\n",
      "sha": "d300cfa5bd55dda5f6e082241a2ad7ef38c8c717",
      "size": 4776,
      "timestamp": "2025-01-26T13:44:35.683455"
    },
    {
      "path": "docs/requirements.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/requirements.md",
      "content": "# Requirements\n\nYou'll need a machine on which you can run code-server. You can use a physical\nmachine you have, or you can use a VM on GCP/AWS.\n\nAt the minimum, we recommend:\n\n- 1 GB of RAM\n- 2 CPU cores\n\nYou can use any Linux distribution, but [our\ndocs](https://coder.com/docs/code-server/latest/guide) assume that you're using\nDebian hosted by Google Cloud (see the following section for instructions on\nsetting this up).\n\nYour environment must have WebSockets enabled, since code-server uses WebSockets\nfor communication between the browser and the server.\n\n## Set up a VM on Google Cloud\n\nThe following steps walk you through setting up a VM running Debian using Google\nCloud (though you are welcome to use any machine or VM provider).\n\nIf you're [signing up with Google](https://console.cloud.google.com/getting-started) for the first time, you should get a 3-month trial with\n\\$300 of credits.\n\nAfter you sign up and create a new Google Cloud Provider (GCP) project, create a\nnew Compute Engine VM instance:\n\n1. Using the sidebar, navigate to **Compute Engine** > **VM Instances**.\n2. Click **Create Instance**.\n3. Provide a **name** for new instance.\n4. Choose the **region** that's closest to you based on [GCP\n   ping](https://gcping.com/).\n5. Choose a **zone** (any option is fine).\n6. We recommend choosing an **E2 series instance** from the [general-purpose\n   family](https://cloud.google.com/compute/docs/machine-types#general_purpose).\n7. Change the instance type to **custom** and set at least **2 cores** and **2\n   GB of RAM**. You can add more resources if desired, though you can also edit\n   your instance at a later point.\n8. Though optional, we highly recommend switching the persistent disk to an SSD\n   with at least 32 GB. To do so, click **change** under **Boot Disk**. Then,\n   change the type to **SSD Persistent Disk**, and set the size to **32**. (You\n   can also grow your disk at a later date).\n9. Go to **Networking** > **Networking Interfaces** and edit the existing\n   interface to use a static internal IP. Click **Done** to save.\n10. If you don't have a [project-wide SSH\n    key](https://cloud.google.com/compute/docs/instances/adding-removing-ssh-keys#project-wide),\n    go to **Security** > **SSH Keys** to add your public key.\n11. Click **Create** to proceed.\n\nNotes:\n\n- To lower costs, you can shut down your server when you're not using it.\n- We recommend using the `gcloud cli` to avoid using the GCP Dashboard if possible.\n- For serving code-server over HTTPS, we recommend using an external domain name along with a service such as Let's Encrypt\n",
      "sha": "835fe5754bd16c4b633bd8f976f3d3816194ce97",
      "size": 2595,
      "timestamp": "2025-01-26T13:44:36.770921"
    },
    {
      "path": "docs/termux.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/termux.md",
      "content": "<!-- prettier-ignore-start -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n# Termux\n\n- [Install](#install)\n- [NPM Installation](#npm-installation)\n- [Upgrade](#upgrade)\n- [Known Issues](#known-issues)\n  - [Git won't work in `/sdcard`](#git-wont-work-in-sdcard)\n  - [Many extensions including language packs fail to install](#many-extensions-including-language-packs-fail-to-install)\n- [Extra](#extra)\n  - [Keyboard Shortcuts and Tab Key](#keyboard-shortcuts-and-tab-key)\n  - [Create a new user](#create-a-new-user)\n  - [Install Go](#install-go)\n  - [Install Python](#install-python)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n<!-- prettier-ignore-end -->\n\n## Install\n\n1. Get [Termux](https://f-droid.org/en/packages/com.termux/) from **F-Droid**.\n2. Run `pkg install tur-repo`\n3. Run `pkg install code-server`\n4. You can now start code server by simply running `code-server`.\n\n## NPM Installation\n\n1. Get [Termux](https://f-droid.org/en/packages/com.termux/) from **F-Droid**.\n\n2. We will now change using the following command.\n\n```sh\ntermux-change-repo\n```\n\nNow select `Main Repository` then change repo to `Mirrors by Grimler Hosted on grimler.se`.\n\n3. After successfully updating of repository update and upgrade all the packages by the following command\n\n```sh\npkg update\npkg upgrade -y\n```\n\n4. Now let's install requirement dependancy.\n\n```sh\npkg install -y \\\n  build-essential \\\n  binutils \\\n  pkg-config \\\n  python3 \\\n  nodejs-lts\nnpm config set python python3\nnode -v\n```\n\nyou will get Node version `v20`\n\n5. Now install code-server following our guide on [installing with npm](./npm.md)\n\n6. Congratulation code-server is installed on your device using the following command.\n\n```sh\ncode-server --auth none\n```\n\n7. If already installed then use the following command for upgradation.\n\n```\nnpm update --global code-server\n```\n\n## Upgrade\n\n1. Remove all previous installs `rm -rf ~/.local/lib/code-server-*`\n2. Run the install script again `curl -fsSL https://code-server.dev/install.sh | sh`\n\n## Known Issues\n\n### Git won't work in `/sdcard`\n\nIssue : Using git in the `/sdcard` directory will fail during cloning/commit/staging/etc...\\\nFix : None\\\nPotential Workaround :\n\n1. Create a soft-link from the debian-fs to your folder in `/sdcard`\n2. Use git from termux (preferred)\n\n### Many extensions including language packs fail to install\n\nIssue: Android is not seen as a Linux environment but as a separate, unsupported platform, so code-server only allows [Web Extensions](https://code.visualstudio.com/api/extension-guides/web-extensions), refusing to download extensions that run on the server.\\\nFix: None\\\nPotential workarounds :\n\nEither\n\n- Manually download extensions as `.vsix` file and install them via `Extensions: Install from VSIX...` in the Command Palette.\n\n- Use an override to pretend the platform is Linux:\n\nCreate a JS script that patches `process.platform`:\n\n```js\n// android-as-linux.js\nObject.defineProperty(process, \"platform\", {\n  get() {\n    return \"linux\"\n  },\n})\n```\n\nThen use Node's `--require` option to make sure it is loaded before `code-server` starts:\n\n```sh\nNODE_OPTIONS=\"--require /path/to/android-as-linux.js\" code-server\n```\n\n⚠️ Note that Android and Linux are not 100% compatible, so use these workarounds at your own risk. Extensions that have native dependencies other than Node or that directly interact with the OS might cause issues.\n\n## Extra\n\n### Keyboard Shortcuts and Tab Key\n\nIn order to support the tab key and use keyboard shortcuts, add this to your\nsettings.json:\n\n```json\n{\n  \"keyboard.dispatch\": \"keyCode\"\n}\n```\n\n### Create a new user\n\nTo create a new user follow these simple steps -\n\n1. Create a new user by running `useradd <username> -m`.\n2. Change the password by running `passwd <username>`.\n3. Give your new user sudo access by running `visudo`, scroll down to `User privilege specification` and add the following line after root `username ALL=(ALL:ALL) ALL`.\n4. Now edit the `/etc/passwd` file with your command line editor of choice and at the end of the line that specifies your user change `/bin/sh` to `/bin/bash`.\n5. Now switch users by running `su - <username>`\n\n- Remember the `-` betweeen `su` and username is required to execute `/etc/profile`,\\\n  since `/etc/profile` may have some necessary things to be executed you should always add a `-`.\n\n### Install Go\n\n> From https://golang.org/doc/install\n\n1. Go to https://golang.org/dl/ and copy the download link for `linux arm` and run the following:\n\n```bash\nwget download_link\n```\n\n2. Extract the downloaded archive. (This step will erase all previous GO installs, make sure to create a backup if you have previously installed GO)\n\n```bash\nrm -rf /usr/local/go && tar -C /usr/local -xzf archive_name\n```\n\n3. Run `nano /etc/profile` and add the following line `export PATH=$PATH:/usr/local/go/bin`.\n4. Now run `exit` (depending on if you have switched users or not, you may have to run `exit` multiple times to get to normal termux shell) and start Debian again.\n5. Check if your install was successful by running `go version`\n\n### Install Python\n\n> Run these commands as root\n\n1. Run the following commands to install required packages to build python:\n\n```bash\nsudo apt-get update\nsudo apt-get install make build-essential libssl-dev zlib1g-dev \\\n  libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \\\n  libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev\n```\n\n2. Install [pyenv](https://github.com/pyenv/pyenv/) from [pyenv-installer](https://github.com/pyenv/pyenv-installer) by running:\n\n```bash\ncurl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash\n```\n\n3. Run `nano /etc/profile` and add the following:\n\n```bash\nexport PYENV_ROOT=\"/root/.pyenv\"\nexport PATH=\"/root/.pyenv/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv virtualenv-init -)\"\n```\n\n4. Exit and start Debian again.\n5. Run `pyenv versions` to list all installable versions.\n6. Run `pyenv install version` to install the desired python version.\n   > The build process may take some time (an hour or 2 depending on your device).\n7. Run `touch /root/.pyenv/version && echo \"your_version_here\" > /root/.pyenv/version`\n8. (You may have to start Debian again) Run `python3 -V` to verify if PATH works or not.\n   > If `python3` doesn't work but pyenv says that the install was successful in step 6 then try running `$PYENV_ROOT/versions/your_version/bin/python3`.\n",
      "sha": "84dcec0765e4a4d856659085eba8fdef874c9ed9",
      "size": 6570,
      "timestamp": "2025-01-26T13:44:37.729546"
    },
    {
      "path": "docs/triage.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/triage.md",
      "content": "# Triage\n\nTriaging code-server issues is done with the following issue filter:\n\n```text\nis:issue is:open no:project sort:created-asc -label:blocked -label:upstream -label:waiting-for-info -label:extension-request\n```\n\nThis will show issues that:\n\n1. Are open.\n1. Have no assigned project.\n1. Are not `blocked` or tagged for work by `upstream` (the VS Code core team).\n   If an upstream issue is detrimental to the code-server experience we may fix\n   it in our patch instead of waiting for the VS Code team to fix it. Someone\n   should periodically go through these issues to see if they can be unblocked!\n1. Are not labeled `waiting-for-info`.\n1. Are not extension requests.\n\n## Triage process\n\n1. If an issue is a question/discussion, it should be converted into a GitHub\n   discussion.\n1. Otherwise, give the issue the appropriate labels (feel free to create new\n   ones if necessary). There are no hard and set rules for labels. We don't have\n   many so look through and see how they've been used throughout the repository.\n   They all also have descriptions.\n1. If more information is required, please ask the submitter and tag as\n   `waiting-for-info` and wait.\n1. Finally, the issue should be moved into the\n   [code-server](https://github.com/coder/code-server/projects/1) project where we\n   pick out issues to fix and track their progress.\n\nWe also use [milestones](https://github.com/coder/code-server/milestones) to track\nwhat issues are planned/or were closed for what release.\n",
      "sha": "6d4120f9720965570a7b5be508e40c0d7eef0a75",
      "size": 1491,
      "timestamp": "2025-01-26T13:44:38.725345"
    },
    {
      "path": "docs/upgrade.md",
      "url": "https://github.com/coder/code-server/blob/main/docs/upgrade.md",
      "content": "# Upgrade\n\nTo upgrade code-server, install the new version over the old version. All user\ndata is in `~/.local/share/code-server`, so they are preserved between\ninstallations.\n",
      "sha": "f4f90e6ce04428933731e4775586055fb67eae4d",
      "size": 176,
      "timestamp": "2025-01-26T13:44:39.687406"
    }
  ]
}